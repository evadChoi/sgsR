names(rcl) <- "strata"
breaks
data.frame(from=c(-Inf,breaks,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
breaks <- c("5", "10", "15", "20")
breaks <- data.frame(from=c(-Inf,breaks,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
breaks
rcl <- terra::classify(rastermetric,breaks)
breaks <- c(5, 10, 15, 20)
breaks <- data.frame(from=c(-Inf,breaks,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl <- terra::classify(rastermetric,breaks)
names(rcl) <- "strata"
plot(rcl)
metric2 <- "wal_3"
rastermetric <- terra::subset(mraster, metric2)
rastermetric
rastermetric2 <- terra::subset(mraster, metric2)
breaks2 <- c(1,6,8)
breaks2 <- data.frame(from=c(-Inf,breaks2,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
breaks2
rcl2 <- terra::classify(rastermetric2,breaks2)
names(rcl) <- "strata2"
rstack <- c(rcl, rcl2)
rstack
rstack %>%
as.data.frame() %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
rcl <- terra::classify(rastermetric,breaks)
names(rcl) <- "strata"
rcl2 <- terra::classify(rastermetric2,breaks2)
names(rcl) <- "strata2"
rstack <- c(rcl, rcl2)
rstack
#--- reclassify values based on breaks ---#
breaks <- data.frame(from=c(-Inf,breaks,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl <- terra::classify(rastermetric,breaks)
names(rcl) <- "strata"
rcl
rastermetric2 <- terra::subset(mraster, metric2)
breaks2 <- data.frame(from=c(-Inf,breaks2,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl2 <- terra::classify(rastermetric2,breaks2)
names(rcl) <- "strata2"
rstack <- c(rcl, rcl2)
rstack
breaks <- data.frame(from=c(-Inf,breaks,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl <- terra::classify(rastermetric,breaks)
names(rcl) <- "strata"
rastermetric2 <- terra::subset(mraster, metric2)
breaks2 <- data.frame(from=c(-Inf,breaks2,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl2 <- terra::classify(rastermetric2,breaks2)
names(rcl2) <- "strata2"
rstack <- c(rcl, rcl2)
rstack
rstack %>%
as.data.frame() %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
strata <- rstack %>%
as.data.frame() %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
pull(class)
strata
rout <- terra::setValues(rcl,strata)
rstack %>%
as.data.frame() %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
rstack
k <- rstack %>%
as.data.frame() %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
rout <- terra::setValues(mraster[[1]],k$)
rout <- terra::setValues(mraster[[1]],k$class)
plot(rout)
k
rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
k <- rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
pull(class)
classify(rstack)$class
rstack
rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
dplyr::select(x, y, class)
k <- rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
dplyr::select(-strata,-strata2)
rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
ungroup() %>%
dplyr::select(-strata,-strata2)
cellFromXY(rcl,cbind(k$x,k$y))
rstack <- c(rcl, rcl2)
k <- rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
ungroup() %>%
dplyr::select(-strata,-strata2)
idx <- cellFromXY(rcl,cbind(k$x,k$y))
#--- convert back to original mraster extent ---#
rcl[,1][idx] <- k$class
#--- convert back to original mraster extent ---#
rcl[idx] <- k$class
rcl
plot(rcl)
unique(k$class)
k <- rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
ungroup()
unique(k$strata)
unique(k$strata2)
c(breaks,if(!missing(breaks2)) breaks2)
breaks2
list(breaks,if(!missing(breaks2)) breaks2)
breaks <- c(seq(5,20,5))
breaks
rastermetric2
breaks2 <- c(seq(1,8,2)
)
breaks2
rastermetric <- terra::subset(mraster,metric)
mraster
metric <- "wal_1"
metric2 <- "wal_3"
rastermetric <- terra::subset(mraster,metric)
breaks_m <- data.frame(from=c(-Inf,breaks,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl <- terra::classify(rastermetric,breaks_m)
names(rcl) <- "strata"
rastermetric2 <- terra::subset(mraster, metric2)
breaks2_m <- data.frame(from=c(-Inf,breaks2,Inf)) %>%
mutate(to = lead(from),
becomes = seq(1:length(from))) %>%
na.omit() %>%
as.matrix()
rcl2 <- terra::classify(rastermetric2,breaks2_m)
names(rcl2) <- "strata2"
rstack <- c(rcl, rcl2)
k <- rstack %>%
as.data.frame(xy=TRUE) %>%
group_by(strata,strata2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id()) %>%
ungroup()
idx <- cellFromXY(rcl,cbind(k$x,k$y))
#--- convert back to original mraster extent ---#
rcl[idx] <- k$class
data <- as.data.frame(rastermetric)
names(data) <- "metric"
p1 <- ggplot(data,aes(metric)) +
geom_histogram() +
geom_vline(xintercept = breaks, linetype = "dashed") +
ggtitle("Metric histogram with defined breaks")
p1
ggplot(data,aes(metric)) +
geom_histogram() +
geom_vline(xintercept = breaks, linetype = "dashed") +
ggtitle(paste0(metric, " histogram with defined breaks"))
data2 <- as.data.frame(rastermetric2)
names(data2) <- "metric"
p2 <- ggplot(data2,aes(metric2)) +
geom_histogram() +
geom_vline(xintercept = breaks2, linetype = "dashed") +
ggtitle(paste0(metric2, " histogram with defined breaks"))
p2
data2 <- as.data.frame(rastermetric2)
names(data2) <- "metric2"
p2 <- ggplot(data2,aes(metric2)) +
geom_histogram() +
geom_vline(xintercept = breaks2, linetype = "dashed") +
ggtitle(paste0(metric2, " histogram with defined breaks"))
p2
ggarrange(p1,p1)
use_package("ggpubr")
library(ggpubr)
ggarrange(p1, p1, ncol = 1, nrow =2)
p1 <- ggplot(data,aes(metric)) +
geom_histogram() +
geom_vline(xintercept = breaks, linetype = "dashed") +
ggtitle(paste0(metric, " histogram with defined breaks"))
data <- as.data.frame(rastermetric)
names(data) <- "metric"
p1 <- ggplot(data,aes(metric)) +
geom_histogram() +
geom_vline(xintercept = breaks, linetype = "dashed") +
ggtitle(paste0(metric, " histogram with defined breaks"))
data2 <- as.data.frame(rastermetric2)
names(data2) <- "metric2"
p2 <- ggplot(data2,aes(metric2)) +
geom_histogram() +
geom_vline(xintercept = breaks2, linetype = "dashed") +
ggtitle(paste0(metric2, " histogram with defined breaks"))
ggarrange(p1, p2, ncol = 1, nrow =2)
list(breaks = breaks,if(!missing(breaks2)) breaks2 = breaks2)
breaks_rcl <- list(details = list(breaks = breaks,if(!missing(breaks2)) breaks2), raster = rcl)
breaks_rcl
breaks_rcl <- list(details = list(breaks = breaks, breaks2 = if(!missing(breaks2)) breaks2), raster = rcl)
breaks_rcl
load_all()
document()
help(strat_breaks)
document()
help(strat_breaks)
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wall_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wall_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
load_all()
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wall_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wal_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
rstack %>%
as.data.frame(xy=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wal_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
load_all()
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wal_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
load_all()
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wal_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9))
plot(k)
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21))
plot(k)
help(strat_breaks)
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE)
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE,details = TRUE)
k$details$breaks2
load_all()
load_all()
k <- strat_breaks(mraster, metric = "wal_1", breaks = c(4,9,13,21),plot=TRUE,details = TRUE)
k$details
k <- strat_breaks(mraster, metric = "wal_1", metric2 = "wal_3", breaks = c(4,9,13,21), breaks2 = c(4,6,9),details = T, plot= TRUE)
k$details$breaks2
k
document()
load_all()
document()
#--- define breaks for metric ---#
breaks <- c(seq(5,20,5))
breaks
breaks1 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
breaks = breaks
details = TRUE,
breaks1 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
breaks = breaks,
details = TRUE,
plot = TRUE)
breaks2 <- c(seq(3,9,3))
breaks2
breaks2 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
metric2 = "wal_3",
breaks = breaks,
breaks2 = breaks2
details = TRUE,
breaks2 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
metric2 = "wal_3",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
#--- stratify on 2 metrics ---#
breaks2 <- c(seq(3,9,3))
breaks2
breaks2 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
metric2 = "wal_3",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
breaks2
#--- define breaks for metric ---#
breaks <- c(seq(5,20,5))
breaks
bk1 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
breaks = breaks,
details = TRUE,
plot = TRUE)
breaks2 <- c(seq(3,9,3))
breaks2
bk2 <- strat_breaks(mraster = wall_poly,
metric = "wal_1",
metric2 = "wal_3",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = mraster,
n = 200,
algorithm = "lpm2"
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = mraster,
n = 200,
algorithm = "lpm2",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lpm2",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lpm2",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_w_a <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lpm2",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lpm2",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_w_a <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lpm2",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lcube",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_w_a <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lcube",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- need to add a variable named strata to enable stratified sampling ---#
mraster <- c(wall_poly,kmeans)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = mraster,
n = 200,
algorithm = "lcubestratified",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_w_a <- sample_balanced(mraster = mraster,
n = 200,
algorithm = "lcubestratified",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
knitr::knit("vignettes/sgsR-vignette.Rmd")
knitr::knit("vignettes/sgsR-vignette.Rmd",output = "vignettes/sgsR-vignette.html")
rmarkdown::render('sgsR-vignette.rmd', output_format = 'html_document')
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
srs_wo
existing <- extract_existing(sraster = sraster,
existing = srs_wo)
existing
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- red plots are existing and black are new ---#
#--- how many samples did we get total? ---#
strat_w_e
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e_i <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
existing
sraster
existing
unique(existing$strata)
unique(sraster$strata)
existing <- extract_existing(sraster = sraster,
existing = srs_wo)
existing
existing <- extract_existing(sraster = kmeans,
existing = srs_wo)
existing
strat_w_e_i <- sample_strat(sraster = kmeans,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e_i
metrics <- extract_metrics(sraster = wall_poly,
samples = strat_w_e_i)
metrics
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
load_all()
document()
load()
load_all()
library(devtools)
load_all()
document()
help(strat_kmeans)
help(sgsR)
??sgsR
?sgsR
