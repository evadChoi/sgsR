nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- perform stratification using principal components on P1 only ---#
pcomp1 <- strat_pcomp(mraster = wall_poly,
nstrata = 4)
plot(pcomp1)
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
plot(pcomp2)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- perform stratification using principal components on P1 only ---#
pcomp1 <- strat_pcomp(mraster = wall_poly,
nstrata = 4)
plot(pcomp1)
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
plot(pcomp2)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- perform stratification using an individual metric ---#
#--- if no 'metric' name defined and raster is 1 layer - automatically uses only available layer ---#
metrics1 <- strat_metrics(mraster = wall_poly[[1]],
nstrata = 5)
plot(metrics1)
#--- perform stratification using an individual metric ---#
metrics2 <- strat_metrics(mraster = wall_poly,
metric = "wal_5",
nstrata = 10)
plot(metrics2)
#--- perform stratification using 2 metrics metrics ---#
metrics3 <- strat_metrics(mraster = wall_poly,
metric = "wal_5",
metric2 = "wal_2",
nstrata = 10,
nstrata2 = 5)
plot(metrics3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
srs_wo <- sample_srs(sraster = sraster,
n = 50)
plot(sraster)
plot(srs_wo,add = T, col= "Black")
#--- change mindist parameter ---#
srs_md <- sample_srs(sraster = sraster,
n = 50,
mindist = 200)
plot(sraster)
plot(srs_md,add = T, col= "Black")
#--- sampling **with** access defined---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also speficy we want an external buffer ('buff_outer') of 200 ---#
srs_w <- sample_srs(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
plot(sraster)
plot(srs_w,add = T, col= "Black")
#--- sampling **with** access defined---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also speficy we want an external buffer ('buff_outer') of 200 ---#
srs_w <- sample_srs(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
load_all()
document()
help(sample_strat)
load_all()
#--- sampling **with** access defined---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also speficy we want an external buffer ('buff_outer') of 200 ---#
srs_w <- sample_srs(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
#--- sampling **with** access defined---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also speficy we want an external buffer ('buff_outer') of 200 ---#
srs_w <- sample_srs(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
#--- change mindist parameter ---#
strat_md <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
plot = TRUE)
#--- extract strata from raster for already existing sample network ---#
#--- we use random samples defined above ---#
existing <- extract_existing(sraster = sraster,
existing = srs_wo)
existing
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
strat_w_e
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e_i <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e_i
load_all()
strat_w_e_i <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
strat_w_a <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- extract strata from raster for already existing sample network ---#
#--- we use random samples defined above ---#
existing <- extract_existing(sraster = sraster,
existing = srs_wo)
existing
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e_i <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e_i
#--- extract metrics from multi-band ALS raster for potential modeling ---#
metrics <- extract_metrics(sraster = wall_poly,
samples = strat_w_ei)
#--- extract metrics from multi-band ALS raster for potential modeling ---#
metrics <- extract_metrics(sraster = wall_poly,
samples = strat_w_e_i)
metrics
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
system.file("extdata", "wall_metrics_small.tif", package = "sgsR")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[5]],
nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
load_all()
check()
load_all()
check()
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
sraster
library(terra)
help(terra::mask)
help(mask)
load_all()
check()
sraster
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200)
load_all()
load_all()
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200)
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
strat_wo
load_all()
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
suppressWarnings(terra::plot(samples, add = T, col = ifelse(samples$type=="existing","Red","Black")),)
load_all()
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
#--- change mindist parameter ---#
strat_md <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
strat_w_a <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- extract strata from raster for already existing sample network ---#
#--- we use random samples defined above ---#
existing <- extract_existing(sraster = sraster,
existing = srs_wo)
existing
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e_i <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e_i
#--- extract metrics from multi-band ALS raster for potential modeling ---#
metrics <- extract_metrics(sraster = wall_poly,
samples = strat_w_e_i)
metrics
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
check()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[5]],
nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
wall_poly[[5]]
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[5]], nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
load_all()
rmarkdown::render('sgsR.vignette.Rmd', output_format = 'html_document')
rmarkdown::render('vignettes/sgsR.vignette.Rmd', output_format = 'html_document')
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
strat_kmeans(wall_poly[[5]],4)
strat_kmeans(wall_poly[[5]],nstrata=4)
library(devtools)
load_all()
rm(list = c("strat_kmeans"))
strat_kmeans(mraster = wall_poly, nstrata = 4)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/wall_metrics_small.tif"
raster <- terra::rast(raster)
poly <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/inventory_polygons.shp"
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/roads.shp"
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(raster,
poly_subset)
plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly, nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[5]], nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
raster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/wall_metrics_small.tif"
raster <- terra::rast(raster)
poly <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/inventory_polygons.shp"
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- sf::st_read(poly)
roads <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/roads.shp"
roads <- sf::st_read(roads)
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
wall_poly <- terra::mask(raster,
poly_subset)
plot(wall_poly[[1:2]])
strat_kmeans(mraster = wall_poly[[5]],nstrata=4)
strat_kmeans(mraster = wall_poly[[5]],nstrata=4)
plot(wall_poly[[1:2]])
strat_kmeans(mraster = wall_poly[[5]],nstrata=4)
k <- strat_kmeans(mraster = wall_poly[[5]],nstrata=4)
plot(k)
strat_kmeans(mraster = wall_poly[[5]],nstrata=4, plot = T)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
load_all()
check()
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
#--- change mindist parameter ---#
srs_md <- sample_srs(sraster = sraster,
n = 300,
mindist = 400,
plot = TRUE)
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
rmarkdown::render('vignettes/sgsR-vignette.Rmd', output_format = 'html_document')
document()
check()
help(tallySamples)
help(classPlot)
load_all()
check()
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
sraster
sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
load_all()
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
check()
raster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/wall_metrics_small.tif"
raster <- terra::rast(raster)
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(mraster)
idx_all <- 1:terra::ncell(mraster)
idx_na <- is.finite(vals)
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster)
idx_all <- 1:terra::ncell(raster)
idx_na <- is.finite(vals)
validCandidates <- idx_all[idx_na]
v <- vals[validCandidates,]
v
N <- nrow(v)
n=100
p <- rep(n/N,N)
sampled <- SamplingBigData::lpm2_kdtree(prob = p, x = vals[validCandidates,])
sampled <- SamplingBigData::lpm2_kdtree(prob = p, x = v)
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster) %>%
as.data.frame()
library(devtools)
load_all()
rm(list = c("strat_kmeans"))
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster) %>%
as.data.frame()
terra::values(raster)
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster) %>%
as.data.frame()
library(tidyverse)
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster) %>%
as.data.frame()
idx_all <- 1:nrow(vals)
idx_all <- 1:nrow(vals)
idx_na <- is.finite(vals)
validCandidates <- vals[idx_na]
validCandidates
vals <- terra::values(raster) %>%
as.data.frame()
idx_all <- 1:nrow(vals)
idx_na <- is.finite(vals)
validCandidates <- vals[idx_na,]
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster) %>%
as.data.frame()
idx_all <- 1:nrow(vals)
idx_na <- is.finite(vals)
is.finite(vals)
#--- create indices for all, NA, and valid sampling candidates ---#
vals <- terra::values(raster) %>% as.data.frame()
idx_all <- 1:nrow(vals)
idx_na <- is.finite(vals)
idx_na <- is.na(vals)
validCandidates <- vals[!idx_na,]
validCandidates
v <- matrix(validCandidates)
v
v <- as.matrix(validCandidates)
v
N <- nrow(v)
p <- rep(n/N,N)
sampled <- SamplingBigData::lpm2_kdtree(prob = p, x = v)
