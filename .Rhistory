?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
document()
?calculate_allocation
document()
?calculate_allocation
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
?calculate_allocation
document()
?calculate_allocation
document()
?calculate_allocation
calculate_allocation(sraster = sraster,nSamp = 200)
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim")
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster)
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 1)
which(names(mraster) == metric)
metric <- which(names(mraster) == metric)
metric
"zsd"
which(names(mraster) == metric)
mraster
metric
metric <- "zsd"
which(names(mraster) == metric)
metric <- which(names(mraster) == metric)
names(mraster)[metric]
metric
metric <- names(mraster)[metric]
metric
load_all()
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 1)
load_all()
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 1)
load_all()
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 1)
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 4)
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 8)
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 3)
calculate_allocation(sraster = sraster,nSamp = 200,allocation = "optim", mraster = mraster, metric = 5)
document()
load_all()
?calculate_allocation
load_all()
document()
?calculate_allocation
calculate_allocation(sraster = sraster, nSamp = 271, allocation = "optim")
calculate_allocation(sraster = sraster, nSamp = 271, allocation = "optim", mraster = mraster, metric = 3, existing = existing)
e.sr <- extract_strata(sraster, existing)
calculate_allocation(sraster = sraster, nSamp = 271, allocation = "optim", mraster = mraster, metric = 3, existing = e.sr)
calculate_allocation(sraster = sraster, nSamp = 271, allocation = "optim", mraster = mraster, metric = 3, existing = e.sr, include = TRUE)
metric
if (terra::nlyr(mraster) == 1) {
#--- set name of raster band to 'metric' ---#
metric <- names(mraster)
} else {
#--- subset metric based on whether it is a character of number ---#
if (is.null(metric)) {
stop(" multiple layers detected in 'mraster'. Define 'metric' to calculate stratum variability.")
} else {
#--- Numeric ---#
if (is.numeric(metric)) {
if ((metric) > (terra::nlyr(mraster)) | metric < 0) {
stop("'metric' index doest not exist within 'mraster'")
}
metric <- names(mraster)[metric]
#--- Character ---#
} else if (is.character(metric)) {
if (!metric %in% names(mraster)) {
stop(paste0("'mraster' must have an attribute named ", metric))
}
metric <- which(names(mraster) == metric)
metric <- names(mraster)[metric]
}
}
}
metric
names(mraster)[metric]
metric <- which(names(mraster) == metric)
metric <- names(mraster)[metric]
metric
mraster["zsd"]
mraster[3]
metric = "zsd"
if(is.null(mraster)){
stop("'mraster' must be supplied if 'allocation = optim'.")
}
if (!inherits(mraster, "SpatRaster")) {
stop("'mraster' must be type SpatRaster", call. = FALSE)
}
if (terra::nlyr(mraster) == 1) {
#--- set name of raster band to 'metric' ---#
metric <- names(mraster)
} else {
#--- subset metric based on whether it is a character of number ---#
if (is.null(metric)) {
stop(" multiple layers detected in 'mraster'. Define 'metric' to calculate stratum variability.")
} else {
#--- Numeric ---#
if (is.numeric(metric)) {
if ((metric) > (terra::nlyr(mraster)) | metric < 0) {
stop("'metric' index doest not exist within 'mraster'")
}
metric <- names(mraster)[metric]
#--- Character ---#
} else if (is.character(metric)) {
if (!metric %in% names(mraster)) {
stop(paste0("'mraster' must have an attribute named ", metric))
}
}
}
}
message(paste0("Implementing optimal allocation of samples based on variability of ", metric))
r <- c(sraster,mraster[metric])
r
metric = 4
if(is.null(mraster)){
stop("'mraster' must be supplied if 'allocation = optim'.")
}
if (!inherits(mraster, "SpatRaster")) {
stop("'mraster' must be type SpatRaster", call. = FALSE)
}
if (terra::nlyr(mraster) == 1) {
#--- set name of raster band to 'metric' ---#
metric <- names(mraster)
} else {
#--- subset metric based on whether it is a character of number ---#
if (is.null(metric)) {
stop(" multiple layers detected in 'mraster'. Define 'metric' to calculate stratum variability.")
} else {
#--- Numeric ---#
if (is.numeric(metric)) {
if ((metric) > (terra::nlyr(mraster)) | metric < 0) {
stop("'metric' index doest not exist within 'mraster'")
}
metric <- names(mraster)[metric]
#--- Character ---#
} else if (is.character(metric)) {
if (!metric %in% names(mraster)) {
stop(paste0("'mraster' must have an attribute named ", metric))
}
}
}
}
message(paste0("Implementing optimal allocation of samples based on variability of ", metric))
r <- c(sraster,mraster[metric])
r
r <- c(sraster,mraster[metric])
vals <- terra::values(r) %>%
as.data.frame() %>%
dplyr::select(strata, !!as.name(metric)) %>%
dplyr::filter(complete.cases(.)) %>%
dplyr::group_by(strata)
#--- determine number of samples within each strata -- optimal allocation method ---#
toSample <- vals %>%
dplyr::summarize(sd = sd(!!as.name(metric)),
count = dplyr::n()) %>%
dplyr::mutate(denom = sum(count*sd)) %>%
dplyr::rowwise() %>%
#--- optimal allocation equation ---#
dplyr::mutate(total = round((nSamp*count*sd)/denom)) %>%
dplyr::select(strata, total)
toSample
sum(toSample$total) - nSamp
existing <- data.frame(strata = existing$strata)
existing
existing
existing <- e.sr
existing <- data.frame(strata = existing$strata)
existing
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(eTotal = dplyr::n())
existing
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical. Consider using extract_strata().")
}
toSample %>%
dplyr::left_join(existing, by = "strata") %>%
dplyr::mutate(total = total - eTotal) %>%
dplyr::select(-eTotal) %>%
as.data.frame()
existing$eTotal + toSample$total
existing$eTotal
toSample$total
toSample$need <- existing$eTotal + toSample$total
toSample
load_all()
calculate_allocation(sraster = sraster, nSamp = 321, existing = e.sr)
k <- calculate_allocation(sraster = sraster, nSamp = 321, existing = e.sr)
sum(k$need)
k <- calculate_allocation(sraster = sraster, ,allocation = "optim", mraster = mraster, metric = 1, nSamp = 321, existing = e.sr)
k
sum(k$need)
document()
?sample_strat
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
mraster = mraster,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
mraster = mraster,
metric = 1,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200)
calculate_allocation(sraster = sr,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mr,
metric = 1)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1,
force = TRUE)
load_all()
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1,
force = TRUE)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1,
force = TRUE)
sum(k$total)
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
loaD_all()
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr)
sample_strat(sraster = sraster,
nSamp = 200,
allocation = "optim",
mraster = mraster,
metric = 1,
access = access,
buff_inner = 50,
buff_outer = 200,
filename = tempfile(fileext = ".shp"))
sample_strat(sraster = sraster,
nSamp = 200,
allocation = "optim",
mraster = mraster,
metric = 1,
access = access,
buff_inner = 50,
buff_outer = 200,
filename = tempfile(fileext = ".shp"))
