mats$matQ
mats$matQ
df
mats
samples <- extract_metrics(mraster, existing, data.frame = TRUE)
samples
matCovSamp <- mat_cov(vals = samples[5:ncol(samples)], nQuant = nQuant, nb = nb, matQ = mats$matQ)
samples <- extract_metrics(mraster, existing, data.frame = TRUE)
#--- Assign code to differentiate between original samples and those added during HELS algorithm ---#
samples$type <- "existing"
samples$n <- seq(1:nrow(samples))
#--- Rearrange columns ---#
samples <- samples %>%
select(X,Y,n,type,everything())
#--- Create data hypercube of existing samples to compare with mraster data ---#
matCovSamp <- mat_cov(vals = samples[5:ncol(samples)], nQuant = nQuant, nb = nb, matQ = mats$matQ)
matCovSamp
matCovSampDens <- matCovSamp / nrow(samples)
matCovSampDens
matCovDens <- mats$matCov / nrow(vals)
matCovDens
matCovDens[which(matCovDens <= 0.01)] <- NA
samples <- extract_metrics(mraster, existing, data.frame = TRUE)
samples$type <- "existing"
samples$n <- seq(1:nrow(samples))
samples <- samples %>%
select(X,Y,n,type,everything())
matCovSamp <- mat_cov(vals = samples[5:ncol(samples)], nQuant = nQuant, nb = nb, matQ = mats$matQ)
matCovSamp[which(matCovSamp == 0)] <- 0.0000001
matCovSampDens <- matCovSamp / nrow(samples)
matCovSampDens
ratio1 <- matCovSampDens / matCovDens
ratio1 <- matCovSampDens / matCovDens
ratio1
ratioGr1
mats$matQ
i=1
j=1
ii=1
jj=1
covLower <- mats$matQ[ii, jj]
covUpper <- mats$matQ[ii + 1, jj]
covLower
covUpper
mats$matQ[ii, jj]
ii
ii=2
jj=2
mats$matQ[ii, jj]
covLower <- mats$matQ[ii, jj]
covUpper <- mats$matQ[ii + 1, jj]
df <- data.frame(rowSub = i, colSub = j, rowObj = ii, colObj = jj, covLower = covLower, covUpper = covUpper)
df
test <- data.frame()
for(i in 1:nrow(ratioGr1)){
for(j in 1:ncol(ratioGr1)){
if(isTRUE(ratioGr1[i,j])){
for(ii in 1:nrow(ratioGr1)){
for(jj in j+1:ncol(ratioGr1)){
if(isTRUE(ratioGr1[ii,jj])){
covLower <- mats$matQ[ii, jj]
covUpper <- mats$matQ[ii + 1, jj]
df <- data.frame(rowSub = i, colSub = j, rowObj = ii, colObj = jj, covLower = covLower, covUpper = covUpper)
test <- rbind(df,test)
} else {
next
}
}
}
} else {
next
}
}
}
ratioGr1[ii,jj]
ii
jj
ncol(ratioGr1-1)
test <- data.frame()
for(i in 1:nrow(ratioGr1)){
for(j in 1:ncol(ratioGr1)){
if(isTRUE(ratioGr1[i,j])){
for(ii in 1:nrow(ratioGr1)){
for(jj in j+1:ncol(ratioGr1-1)){
if(isTRUE(ratioGr1[ii,jj])){
covLower <- mats$matQ[ii, jj]
covUpper <- mats$matQ[ii + 1, jj]
df <- data.frame(rowSub = i, colSub = j, rowObj = ii, colObj = jj, covLower = covLower, covUpper = covUpper)
test <- rbind(df,test)
} else {
next
}
}
}
} else {
next
}
}
}
jj
ratio1
ncol(ratioGr1)
1:ncol(ratioGr1)
j:ncol(ratioGr1)
test <- data.frame()
for(i in 1:nrow(ratioGr1)){
for(j in 1:ncol(ratioGr1)){
if(isTRUE(ratioGr1[i,j])){
for(ii in 1:nrow(ratioGr1)){
for(jj in j:ncol(ratioGr1)){
if(jj == j) next
if(isTRUE(ratioGr1[ii,jj])){
covLower <- mats$matQ[ii, jj]
covUpper <- mats$matQ[ii + 1, jj]
df <- data.frame(rowSub = i, colSub = j, rowObj = ii, colObj = jj, covLower = covLower, covUpper = covUpper)
test <- rbind(df,test)
} else {
next
}
}
}
} else {
next
}
}
}
test
ratioGr1
ratioGr1
sub
covLower
covUpper
sub
mats$matQ
repRankOver <- which(overRep[,3] == ratOrderOver[position])
repRow <- overRep[repRankOver,1]
repCol <- overRep[repRankOver,2]
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
sampOptim
covLower <- mats$matQ[repRow,repCol]
covUpper <- mats$matQ[repRow + 1,repCol]
#--- subset covariate dataset for potential new samples ---#
set.seed(420)
sub <- samples %>% dplyr::filter(samples[,(4 + repCol)] >= covLower & samples[,(4 + repCol)] <= covUpper)
sub
length(sub)
nrow(samples)
matCovDens[repRow,repcol]
ceiling(nrow(samples) * matCovDens[repRow,repcol])
sub
ncol(sub)
sub <- samples %>% dplyr::filter(samples[,(4 + repCol)] >= covLower & samples[,(4 + repCol)] <= covUpper)
nrow(sub)
test
sub
repRow
repCol
test %>% filter(rowSub == repRow & colSub == repCol)
test
nrow(overRep)
ratOrderUnder <- order(ratio1,na.last = NA)
ratOrderUnder
ratOrderOver <- rev(ratOrderUnder)
ratOrderOver
overRep <- which(ratio1 > 1, arr.ind = TRUE)
overRep <- cbind(overRep,which(ratio1 > 1))
overRep
ratio1
overRep
repRankOver <- which(overRep[,3] == ratOrderOver[position])
repRankOver
repRow <- overRep[repRankOver,1]
repCol <- overRep[repRankOver,2]
repRow
repCol
overRep[,3]
overRep
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
covLower <- mats$matQ[repRow,repCol]
covUpper <- mats$matQ[repRow + 1,repCol]
covLower
covUpper
samples %>% dplyr::filter(samples[,(4 + repCol)] >= covLower & samples[,(4 + repCol)] <= covUpper)
sub
which(overRep[,3] == ratOrderOver[position])
position <- 1
which(overRep[,3] == ratOrderOver[position])
repRankOver <- which(overRep[,3] == ratOrderOver[position])
repRow <- overRep[repRankOver,1]
repCol <- overRep[repRankOver,2]
repRow
repCol
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
covLower <- mats$matQ[repRow,repCol]
covUpper <- mats$matQ[repRow + 1,repCol]
#--- subset covariate dataset for potential new samples ---#
set.seed(420)
sub <- samples %>% dplyr::filter(samples[,(4 + repCol)] >= covLower & samples[,(4 + repCol)] <= covUpper)
sub
test %>% filter(rowSub == repRow & colSub == repCol)
repRow
repCol
ratioGr1
repRow
repCol
test
test <- data.frame()
for(i in 1:nrow(ratioGr1)){
for(j in 1:ncol(ratioGr1)){
if(isTRUE(ratioGr1[i,j])){
for(ii in 1:nrow(ratioGr1)){
for(jj in 1:ncol(ratioGr1)){
if(jj == j) next
if(isTRUE(ratioGr1[ii,jj])){
covLower <- mats$matQ[ii, jj]
covUpper <- mats$matQ[ii + 1, jj]
df <- data.frame(rowSub = i, colSub = j, rowObj = ii, colObj = jj, covLower = covLower, covUpper = covUpper)
test <- rbind(df,test)
} else {
next
}
}
}
} else {
next
}
}
}
test
test %>% filter(rowSub == repRow & colSub == repCol)
sub[,(4 + repCol)]
sub
t1
t1 <- test %>% filter(rowSub == repRow & colSub == repCol)
t1
sub %>% filter(sub[,(4 + t1[i]$colObj)] >= t1[i]$covLower & sub[,(4 + t1[i]$colObj)] <= t1[i]$covUpper)
sub
t1
1:nrow(t1)
sub[,(4 + t1[i]$colObj)]
i=1
t1[i]$colObj
t1$colObj[i]
sub %>% filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
sub[,(4 + t1$colObj[i])]
t1$covLower[i]
sub[,(4 + t1$colObj[i])] <= t1$covUpper[i]
t1$covUpper[i]
sub %>% filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
length(subsub)
subsub <- sub %>% filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
length(subsub)
subsub <- sub %>% filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
subsub
nrow(subsub)
i=2
subsub <- sub %>% filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
subsub
t1
subsub
sampOptim
test
overRep
ratOrderOver
position <- 1
repRankOver <- which(overRep[,3] == ratOrderOver[position])
repRankOver
repRow <- overRep[repRankOver,1]
repCol <- overRep[repRankOver,2]
'repRow' <- overRep[repRankOver,1]
repRow
repCol
overRep
i <- 1
sub[,(4 + t1$colObj[i])]
test
overRep
i=2
subsub <- sub %>% filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
subsub
ratOrderOver
overRep
ratOrderOver
overRep[,3]
ratOrderOver[position]
repRankOver <- which(overRep[,3] == ratOrderOver[position])
repRow <- overRep[repRankOver,1]
repCol <- overRep[repRankOver,2]
repRow
repCol
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
sampOptim
overRep
ratOrderOver
overRep
ratOrderOver
RatOrderOver[1:length(overRep)]
ratOrderOver[1:length(overRep)]
1:length(overRep)
overRep
ratOrderOver[1:length(overRep[,3])]
ratOrderOver[1:length(overRep[,3])]
overRep
overRep[order(match(overRep[,3],x))]
x <- ratOrderOver[1:length(overRep[,3])]
overRep[order(match(overRep[,3],x))]
overRep
x
overRep[order(match(overRep,x))]
overRep[order(match(overRep,x)),3]
overRep[,3]
overRep
x
overRep <- which(ratio1 > 1)
overRep
overRep <- which(ratio1 > 1, arr.ind = TRUE)
overRep <- cbind(overRep,which(ratio1 > 1))
overRep
ratOrderOver[1:length(overRep[,3])]
x <- ratOrderOver[1:length(overRep[,3])]
overRep[order(x),]
x
overRep
x
overRep
x
order(match(overRep,x))
overRep
order(match(overRep[,3],x))
overRep[order(ord)]
ord <- order(match(overRep[,3],x))
overRep[order(ord),]
ord
ord
x
overRep
overRep[order(ord)]
overRep[,order(ord)]
overRep[order(ord)]
ord
class(ord)
ord <- vect(order(match(overRep[,3],x)))
overRep[order(ord),]
ord <- c(8,2,1,6,7,4,3,5)
overRep[order(ord),]
as.data.frame(overRep)
xx <- as.data.frame(overRep)
ord <- order(match(overRep[,3],x))
ord
xx %>%
arrange(match(V3,ord))
ord
match(V3,ord)
overRep
ratOrderOver
xx %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)]))
xx <- overRep %>%
as.data.frame() %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)]))
xx
xx[1,]
xx[,1]
repRow <- xx[position,]$row
repCol <- xx[position,]$col
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
sampOptim
repRow
repCol
xx
t1
xx
t1
xx
t1
1:nrow(t1)
t1
overRep
as.data.frame() %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)])) %>%
unite(uniteObj, c("row","col"))
overRep
as.data.frame() %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)]))
overRep
as.data.frame()
overRep %>%
as.data.frame() %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)])) %>%
unite(uniteObj, c("row","col"))
xx <- overRep %>%
as.data.frame() %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)])) %>%
mutate(uniteObj = unite(uniteObj, c("row","col")))
xx <- overRep %>%
as.data.frame() %>%
arrange(match(V3,ratOrderOver[1:nrow(overRep)])) %>%
unite(uniteObj, c("row","col"), remove = FALSE)
xx
t1
test %>%
filter(rowSub == repRow & colSub == repCol) %>%
unite(uniteObj, c("rowObj","colObj"), remove = FALSE)
t1 <- test %>%
filter(rowSub == repRow & colSub == repCol) %>%
unite(uniteObj, c("rowObj","colObj"), remove = FALSE)
test %>%
filter(rowSub == repRow & colSub == repCol) %>%
unite(uniteObj, c("rowObj","colObj"), remove = FALSE) %>%
arrange(match(uniteObj,xx$uniteObj))
t1 <- test %>%
filter(rowSub == repRow & colSub == repCol) %>%
unite(uniteObj, c("rowObj","colObj"), remove = FALSE) %>%
arrange(match(uniteObj,xx$uniteObj))
i=1
subsub <- sub %>%
filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
subsub
ceiling(nrow(samples) * matCovDens[t1$rowObj[i],t1$colObj[i]])
subsub <- sub %>%
filter(sub[,(4 + t1$colObj[i])] >= t1$covLower[i] & sub[,(4 + t1$colObj[i])] <= t1$covUpper[i])
subsub
sampOptim
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
sampOptim
sub
repRow <- xx[position,]$row
repCol <- xx[position,]$col
sampOptim <- ceiling(nrow(samples) * matCovDens[repRow,repcol])
covLower <- mats$matQ[repRow,repCol]
covUpper <- mats$matQ[repRow + 1,repCol]
#--- subset covariate dataset for potential new samples ---#
set.seed(420)
sub <- samples %>%
dplyr::filter(samples[,(4 + repCol)] >= covLower & samples[,(4 + repCol)] <= covUpper)
sub
repCol
repCol
sub
sub
matCovDens[repRow,repcol]
nrow(samples)
ceiling(nrow(samples) * matCovDens[repRow,repcol])
covLower <- mats$matQ[repRow,repCol]
covUpper <- mats$matQ[repRow + 1,repCol]
#--- subset covariate dataset for potential new samples ---#
set.seed(420)
sub <- samples %>%
dplyr::filter(samples[,(4 + repCol)] >= covLower & samples[,(4 + repCol)] <= covUpper)
sub
length(sub)
length(sampOptim)
sampOptim
subsub
analyze_HELS(mraster[[1:3]],existing,nQuant = 20,plot = TRUE)
use_r("analyze_HELSrem")
kk <- analyze_HELS(mraster[[1:3]],existing,nQuant = 20,plot = TRUE)
as.data.frame(kk)
nb <- terra::nlyr(mraster)
library(devtools)
knitr::opts_chunk$set(error = TRUE)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
mraster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/rmf_metrics.tif" #system.file("extdata","rmf_metrics.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
mraster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/rmf_metrics.tif" #system.file("extdata","rmf_metrics.tif", package = "sgsR")
mraster <- terra::rast(mraster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
nb <- terra::nlyr(mraster)
#--- determine crs of input sraster ---#
crs <- crs(mraster)
vals <- terra::as.data.frame(mraster, xy = TRUE, row.names = FALSE) %>%
dplyr::rename(X = x,
Y = y)
vals <- vals %>%
dplyr::filter(complete.cases(.))
mats <- analyze_popLHC(mraster = mraster,PCA = FALSE, nQuant = nQuant)
mats$matCov[which(mats$matCov == 0)] <- 0.0000001
mats <- sgsR::analyze_popLHC(mraster = mraster,PCA = FALSE, nQuant = nQuant)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
load_all()
load_all()
nb <- terra::nlyr(mraster)
#--- determine crs of input sraster ---#
crs <- crs(mraster)
vals <- terra::as.data.frame(mraster, xy = TRUE, row.names = FALSE) %>%
dplyr::rename(X = x,
Y = y)
vals <- vals %>%
dplyr::filter(complete.cases(.))
mats <- analyze_popLHC(mraster = mraster,PCA = FALSE, nQuant = nQuant)
mats <- analyze_popLHC(mraster = mraster,PCA = FALSE, nQuant = nQuant)
load_all()
load_all()
load_all()
mats <- analyze_popLHC(mraster = mraster,PCA = FALSE, nQuant = nQuant)
mraster
nQuant
