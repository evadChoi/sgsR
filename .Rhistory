vals_tp <- vals %>% dplyr::select(-type)
vals_tp
e
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existing
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
existingSamples
inherits(existing, "sf")
extract_metrics(mraster, existing, data.frame = TRUE)
!inherits(existing, "sf")
any(!c("X", "Y") %in% colnames(existing))
any(c("x", "y") %in% colnames(existing))
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
existingSamples <- existing
existingSamples
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
existingSamples
existing %>%
dplyr::select(geometry)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
if (!is.null(existing)) {
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
#--- combined existing samples with vals dataframe ---#
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing %>%
dplyr::select(geometry)
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
#--- create dataset with labels for plotting ---#
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing")
#--- create conjoined existing dataset ---#
vals <- rbind(existingSamples, vals)
}
vals
vals_tp <- vals %>% dplyr::select(-type)
if (is.numeric(cost)){
if(cost > (ncol(vals_tp) + 2) | cost < 0){
stop("'cost' index doest not exist within 'mraster'")
}
#--- need to add 2 because X and Y are added ---#
cost <- cost + 2
} else if (is.character(cost)){
cost <- which(names(vals_tp) == cost)
}  else {
stop("'cost' must be either a numeric index or name of covariate within 'mraster'")
}
load_all()
mr <- calculate_distance(raster = mr, access = ac)
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = "dist2access", plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
install.packages("boomer")
library(boomer)
boom(sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE))
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing %>%
dplyr::select(geometry, type)
existingSamples
library(sgsR)
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
existingSamples
load_all()
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples
existingSamples %>%
dplyr::select(namesvals)
dplyr::mutate(type = "existing")
existingSamples
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples
existingSamples %>%
dplyr::select(namesvals)
existingSamples %>%
dplyr::select(namesvals) %>%
dplyr::mutate(type = "existing")
load_all()
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples %>%
dplyr::select(namesvals) %>%
dplyr::mutate(type = "existing")
existingSamples
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples %>%
dplyr::select(namesvals)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples %>%
dplyr::mutate(type = "existing")
existingSamples %>%
dplyr::mutate(type = "existing") %>%
dplyr::select(namesvals)
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing") %>%
dplyr::select(namesvals)
vals <- rbind(existingSamples, vals)
vals_tp <- vals %>% dplyr::select(-type)
cost
if (is.numeric(cost)){
if(cost > (ncol(vals_tp) + 2) | cost < 0){
stop("'cost' index doest not exist within 'mraster'")
}
#--- need to add 2 because X and Y are added ---#
cost <- cost + 2
} else if (is.character(cost)){
cost <- which(names(vals_tp) == cost)
}  else {
stop("'cost' must be either a numeric index or name of covariate within 'mraster'")
}
cost
ncol(vals_tp)
vals_tp
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
library(sgsR)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
mraster
nlyr(mraster)
mr <- calculate_distance(raster = mr, access = ac)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
cost
vals
vals <- vals %>%
dplyr::filter(complete.cases(.)) %>%
dplyr::mutate(type = "new")
namesvals <- names(vals)
namesvals
if (!is.null(existing)) {
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
#--- combined existing samples with vals dataframe ---#
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
#--- create dataset with labels for plotting ---#
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing") %>%
dplyr::select(namesvals)
#--- create conjoined existing dataset ---#
vals <- rbind(existingSamples, vals)
}
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
library(devtools)
load_all()
run_examples()
run_examples()
load_all()
run_examples()
load_all()
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
calculate_pcomp(mraster = mr, nComp = 5)
Q
calculate_pcomp(mraster = mr, nComp = 5)
pcavals
load_all()
calculate_pcomp(mraster = mr, nComp = 5)
pcavals
pcavals[, i, drop = FALSE]
for (i in 1:nComp) {
rs[[i]] <- terra::setValues(mraster[[1]], pcavals[, i, drop = FALSE])
}
pcaRout <- terra::rast(rs)
rs
load_all()
load_all()
calculate_pcomp(mraster = mr, nComp = 5)
load_all()
calculate_pcomp(mraster = mr, nComp = 5)
pcavals
#--- extract cell level pca values ---#
pcavals <- as.data.frame(PCA$x)
pcavals
#--- create loop to allocate values to cell level taking into account potential NA using 'idx' ---#
rs <- list()
i=1
rs[[i]] <- terra::setValues(mraster[[1]], pcavals[, i, drop = FALSE])
pcavals[, i, drop = FALSE]
calculate_pcomp(mraster = mr, nComp = 5)
pcavals[, i, drop = FALSE]
terra::setValues(mraster[[1]], pcavals[, i, drop = FALSE])
pcavals[, i, drop = FALSE]
calculate_pcomp(mraster = mr, nComp = 5)
rs
class(pcavals[, i, drop = FALSE])
str(pcavals[, i, drop = FALSE])
for (i in 1:nComp) {
rs[[i]] <- terra::setValues(mraster[[1]], pcavals[, i, drop = FALSE])
}
rs
calculate_pcomp(mraster = mr, nComp = 5)
i=1
pcavals[, i, drop = FALSE]
i=2
pcavals[, i, drop = FALSE]
rs[[i]] <- terra::setValues(mraster[[1]], pcavals[, i, drop = FALSE])
strat_pcomp(mr, nStrata = 4)
strat_pcomp(mr, nStrata = 4, plot = TRUE)
mraster[[1]]
calculate_pcomp(mraster = mr, nComp = 5)
mraster[[1]]
pcavals[, i, drop = FALSE]
rs[[i]] <- terra::setValues(x = mraster[[1]], values = pcavals[, i, drop = FALSE])
terra::setValues(x = mraster[[1]], values = pcavals[, i])
terra::setValues(mraster[[1]], pcavals[, i])
calculate_pcomp(mraster = mr, nComp = 5)
load_all()
calculate_pcomp(mraster = mr, nComp = 5)
for (i in 1:nComp) {
rs[[i]] <- terra::setValues(mraster[[1]], pcavals[, i])
}
rs
i=1
pcavals[, i]
terra::setValues(mraster[[1]], pcavals[, i])
load_all()
calculate_pcomp(mraster = mr, nComp = 5)
run_examples()
?n()
run_examples()
load_all()
run_examples()
load_all()
run_examples()
load_all()
run_examples()
?ext()
load_all()
run_examples()
load_all()
run_examples()
run_examples()
load_all()
run_examples()
load_all()
run_examples()
run_examples()
run_examples()
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
mr
run_examples()
run_examples()
#--- Load raster and access files ---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
#--- perform optimum sample boundary stratification ---#
sample_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 4, plot = TRUE)
load_all()
#--- perform optimum sample boundary stratification ---#
sample_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 4, plot = TRUE)
#--- perform optimum sample boundary stratification ---#
strat_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 4, plot = TRUE)
strat_osb(mraster = mr, metric = 4, nSamp = 20, nStrata = 3,  plot = TRUE, details = TRUE)
load_all()
strat_osb(mraster = mr, metric = 4, nSamp = 20, nStrata = 3,  plot = TRUE, details = TRUE)
load_all()
strat_osb(mraster = mr, metric = 4, nSamp = 20, nStrata = 3,  plot = TRUE, details = TRUE)
metric <- as.character(names(rastermetric))
metric <- ggplot2::ensym(metric)
data <- as.data.frame(OSB[[1]])
names(data) <- "metric"
p1 <- ggplot2::ggplot(data, ggplot2::aes(!!metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = OSB[[2]]$OSB, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with optimum sample boundaries."))
print(p1)
metric <- as.character(names(rastermetric))
met <- ggplot2::ensym(metric)
data <- as.data.frame(OSB[[1]])
names(data) <- "metric"
p1 <- ggplot2::ggplot(data, ggplot2::aes(!!met)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = OSB[[2]]$OSB, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with optimum sample boundaries."))
metric
met
rastermetric
strat_osb(mraster = mr, metric = 4, nSamp = 20, nStrata = 3,  plot = TRUE, details = TRUE, samp = 0.2)
metric <- as.character(names(rastermetric))
metric <- ggplot2::ensym(metric)
data <- as.data.frame(OSB[[1]])
names(data) <- "metric"
metric
metric
metric <- as.character(names(rastermetric))
met <- ggplot2::ensym(metric)
data <- as.data.frame(OSB[[1]])
names(data) <- "metric"
met
metric
data <- as.data.frame(OSB[[1]])
names(data) <- "metric"
p1 <- ggplot2::ggplot(data, ggplot2::aes(!!met)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = OSB[[2]]$OSB, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with optimum sample boundaries."))
print(p1)
load_all()
load_all()
strat_osb(mraster = mr, metric = 4, nSamp = 20, nStrata = 3,  plot = TRUE, details = TRUE, samp = 0.2)
metric <- as.character(names(rastermetric))
met <- ggplot2::ensym(metric)
data <- as.data.frame(OSB[[1]])
names(data) <- metric
p1 <- ggplot2::ggplot(data, ggplot2::aes(!!met)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = OSB[[2]]$OSB, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with optimum sample boundaries."))
print(p1)
ncols <- nStrata
col <- RColorBrewer::brewer.pal(ncols, "Set3")
terra::plot(rcl, main = "OSB breaks", col = col, type = "classes")
breaks_rcl <- list(details = OSB, osb = OSB[[2]]$OSB, breaks = breaks, raster = rcl)
breaks_rcl
strat_osb(mraster = mr, metric = "zmax", nSamp = 100, nStrata = 2, samp = 0.75, filename = tempfile(fileext = ".shp"))
strat_osb(mraster = mr, metric = "zmax", nSamp = 100, nStrata = 2, subset = 0.75, filename = tempfile(fileext = ".shp"))
strat_osb(mraster = mr, metric = "zmax", nSamp = 100, nStrata = 2, subset = 0.75, filename = tempfile(fileext = ".tif"))
strat_osb(mraster = mr, metric = "zmax", nSamp = 100, nStrata = 2, subset = 0.75, filename = tempfile(fileext = ".tif"))
#--- perform optimum sample boundary stratification ---#
strat_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 2, plot = TRUE)
load_all()
#--- perform optimum sample boundary stratification ---#
strat_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 2, plot = TRUE)
load_all()
#--- perform optimum sample boundary stratification ---#
strat_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 2, plot = TRUE)
#--- perform optimum sample boundary stratification ---#
strat_osb(mraster = mr, metric = "zsd", nSamp = 200, nStrata = 2, plot = TRUE)
strat_osb(mraster = mr, metric = 4, nSamp = 20, nStrata = 2,  plot = TRUE, details = TRUE)
strat_osb(mraster = mr, metric = "zmax", nSamp = 100, nStrata = 2, subset = 0.75, filename = tempfile(fileext = ".tif"))
strat_pcomp(mraster = mr, nStrata = 4, nStrata2 = 4, plot = TRUE)
strat_pcomp(mraster = mr, nStrata = 2, plot = TRUE)
strat_pcomp(mraster = mr, nStrata = 4, nStrata2 = 4, plot = TRUE, details = TRUE)
strat_pcomp(mraster = mr, nStrata = 4, nStrata2 = 4, plot = TRUE)
strat_pcomp(mraster = mr[[1:3]], nStrata = 4, nStrata2 = 4, plot = TRUE, details = TRUE)
load_all()
strat_pcomp(mraster = mr[[1:3]], nStrata = 4, nStrata2 = 4, plot = TRUE, details = TRUE)
help(sample_pcomp)
help(strat_pcomp)
run_examples()
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1:6]], nStrata = 10, filename = system.file("extdata","kmeans.tif", package = "sgsR"), overwrite = TRUE)
plot(kmeans)
sample_srs(raster = kmeans, nSamp = 100, mindist = 200, filename = system.file("extdata","existing.shp", package = "sgsR"), overwrite = TRUE)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- Load strata raster and existing samples---#
r <- system.file("extdata","kmeans.tif", package = "sgsR")
sr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
#--- perform grid sampling ---#
calculate_reqSamples(sraster = sr, nSamp = 200)
calculate_reqSamples(sraster = sr, nSamp = 200, existing = e)
#--- perform grid sampling ---#
calculate_reqSamples(sraster = sr, nSamp = 200)
#--- Load strata raster and existing samples---#
r <- system.file("extdata","kmeans.tif", package = "sgsR")
sr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
#--- perform grid sampling ---#
calculate_reqSamples(sraster = sr, nSamp = 200)
e.sr <- extract_strata(sraster = sr, existing = e)
calculate_reqSamples(sraster = sr, nSamp = 200, existing = e.sr)
use_r(calculate_coobs)
use_r("calculate_coobs")
use_r("calculate_coobs")
use_r("calculate_ahels")
document()
load_all()
document()
run_examples()
use_tidy_eval()
use_tidy_style(strict = TRUE)
use_tidy_style(strict = TRUE)
run_examples()
run_examples()
document()
help(strat_osb)
check(vignettes = FALSE)
load_all()
