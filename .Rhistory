p
extract_metrics(raster,p)
load_all()
extract_metrics(raster,p)
xy <- st_coordinates(p)
vals <- terra::extract(raster,xy)
#--- bind values and coordinates ---#
samples <- cbind(xy, v)
vals
xy
nrow(xy)
nrow(vals)
#--- bind values and coordinates ---#
samples <- cbind(xy, vals)
samples
load_all()
load_all()
extract_metrics(raster,p)
str(s)
class(s)
inherits(s, "sf")
load_all()
names(raster)
load_all()
load_all()
#--- perform stratification using OSB ---#
osb <- strat_osb(raster = raster, metric = "wal_5", h = 4, n = 100)
osb
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster, k = 4)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[1:2]], k = 4)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
kmeans[[1]]
kmeans[[2]]
kkk <- list(kmeans,raster)
kkk[[2]]
kkk[[1]]
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
kmeans$raster
load_all()
#--- perform stratification using OSB ---#
osb <- strat_osb(raster = raster, metric = "wal_5", h = 2, n = 10)
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = raster, ncp = 2, b1 = 4, b2 = 3)
load_all()
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = raster, ncp = 2, b1 = 4, b2 = 3, plot = FALSE)
pcomp$pca
pcomp$raster
load_all()
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = raster, ncp = 2, b1 = 4, b2 = 3, plot = FALSE)
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
unlist(kmeans)
kmeans
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
kmeans
View(kmeans)
list(kmeans,raster)
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
list(kmeans, rasterl <- )
l <- list(kmeans, raster)
l
l <- list(km=kmeans, r=raster)
as.list(kmeans)
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 8)
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 8)
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- vect(system.file("extdata/inventory_polygons","inventory_polygons.shp", package = "RMFinventory"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- terra::aggregate(poly_subset,dissolve = TRUE)
raster <- terra::mask(raster,poly_subset)
roads <- vect("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/roads/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
#--- perform stratification using OSB ---#
osb <- strat_osb(raster = raster, metric = "wal_5", h = 4, n = 10)
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = raster, ncp = 2, b1 = 4, b2 = 3)
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = raster, metric = "wal_5",b = 10)
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = raster, metric = "wal_5", metric2, "wal_2", b = 10, b2 = 5)
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = raster, metric = "wal_5", metric2, "wal_2", b = 10, b2 = 5, plot = TRUE)
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = raster, metric = "wal_5", metric2 = "wal_2", b = 10, b2 = 5)
load_all()
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = raster, metric = "wal_5", metric2 = "wal_2", b = 10, b2 = 5)
metrics
k <- sample_srs(metrics, 100)
k
load_all()
k <- sample_srs(raster = metrics,ns = 1000000,access = roads,buff_inner = 100,buff_outer = 200,buff_extend = 100,buff_max = 500)
load_all()
k <- sample_srs(raster = metrics,ns = 200, access = roads, buff_inner = 100, buff_outer = 200)
nrow(k)
k
load_all()
load_all()
load_all()
k <- sample_srs(raster = metrics,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
load_all()
k <- sample_srs(raster = metrics,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
load_all()
k <- sample_srs(raster = metrics,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
raster
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
k <- sample_srs(raster = kmeans$raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
load_all()
k <- sample_srs(raster = kmeans$raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
rater = kmeans$raster
raster = kmeans$raster
idx_all <- 1:ncell(raster)
idx_na <- !is.finite(terra::values(raster))
validCandidates <- idx_all[!idx_na]
#--- Rule 1 sampling ---#
nCount <- 0 #Number of sampled cells
#-- identify potential sample from candidates ---#
smp <- sample(1:length(validCandidates), size = 1)
smp
smp_cell <- validCandidates[smp]
smp_cell
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell),
strata = raster[smp_cell]
)
add_temp
validCandidates <- validCandidates[-smp]
validCandidates
add_strata <- add_temp[, c("x", "y", "strata")]
#--- create empty dataframe for samples to be populated to ---#
add_strata <- data.frame(x = NA, y = NA, strata = NA)
add_strata <- add_temp[, c("x", "y", "strata")]
add_temp
add_temp[, c("x", "y", "strata")]
add_temp
dist <- crossdist(add_temp$x, add_temp$y , add_strata$x , add_strata$y)
add_temp$x
add_temp$y
add_strata$x
add_temp
add_strata <- add_temp[, c("x", "y", "strata")]
add_temp
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- vect(system.file("extdata/inventory_polygons","inventory_polygons.shp", package = "RMFinventory"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- terra::aggregate(poly_subset,dissolve = TRUE)
raster <- terra::mask(raster,poly_subset)
roads <- vect("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/roads/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
load_all()
load_all()
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
k <- sample_srs(raster = kmeans$raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
raster <- kmeans$raster
#--- create empty dataframe for samples to be populated to ---#
add_strata <- data.frame(x = NA, y = NA, strata = NA)
idx_all <- 1:ncell(raster)
idx_na <- is.na(terra::values(raster))
validCandidates <- idx_all[!idx_na]
#--- Rule 1 sampling ---#
nCount <- 0 #Number of sampled cells
#-- identify potential sample from candidates ---#
smp <- sample(1:length(validCandidates), size = 1)
smp_cell <- validCandidates[smp]
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell),
strata = raster[smp_cell]
)
add_temp
validCandidates <- validCandidates[-smp]
add_strata <- add_temp[, c("x", "y", "strata")]
add_strata
nCount <-  nCount + 1
#-- identify potential sample from candidates ---#
smp <- sample(1:length(validCandidates), size = 1)
smp_cell <- validCandidates[smp]
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell),
strata = raster[smp_cell]
)
validCandidates <- validCandidates[-smp]
dist <- crossdist(add_temp$x, add_temp$y , add_strata$x , add_strata$y)
dist
add_strata <- rbind(add_strata, add_temp[, c("x", "y", "strata")])
add_strata
load_all()
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- vect(system.file("extdata/inventory_polygons","inventory_polygons.shp", package = "RMFinventory"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- terra::aggregate(poly_subset,dissolve = TRUE)
raster <- terra::mask(raster,poly_subset)
roads <- vect("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/roads/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
load_all()
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- vect(system.file("extdata/inventory_polygons","inventory_polygons.shp", package = "RMFinventory"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- terra::aggregate(poly_subset,dissolve = TRUE)
raster <- terra::mask(raster,poly_subset)
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
roads <- vect("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/roads/roads.shp")
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
#--- create empty dataframe for samples to be populated to ---#
add_strata <- data.frame()
nrow(add_strata)
#--- create empty dataframe for samples to be populated to ---#
add_strata <- data.frame()
idx_all <- 1:ncell(raster)
idx_na <- is.na(terra::values(raster))
validCandidates <- idx_all[!idx_na]
#--- Rule 1 sampling ---#
nCount <- 0 #Number of sampled cells
#-- identify potential sample from candidates ---#
smp <- sample(1:length(validCandidates), size = 1)
smp_cell <- validCandidates[smp]
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell)
)
validCandidates <- validCandidates[-smp]
if (nrow(add_strata) == 0) {
add_strata <- add_temp[, c("x", "y")]
nCount <-  nCount + 1
#--- If add_strata isnt empty, check distance with all other sampled cells in strata ---#
} else {
dist <- crossdist(add_temp$x, add_temp$y , add_strata$x , add_strata$y)
#--- If all less than 'mindist' - accept sampled cell otherwise reject ---#
if (all(as.numeric(dist) > mindist)) {
add_strata <- rbind(add_strata, add_temp[, c("x", "y")])
nCount <-  nCount + 1
}
}
add_strata
add_strata
add_temp[, c("x", "y")]
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell)
)
add_temp
smp_cell
raster
raster <- raster[[1]]
idx_all <- 1:ncell(raster)
idx_na <- is.na(terra::values(raster))
validCandidates <- idx_all[!idx_na]
validCandidates
is.na(terra::values(raster))
idx_all[!idx_na]
#-- identify potential sample from candidates ---#
smp <- sample(1:length(validCandidates), size = 1)
smp
smp_cell <- validCandidates[smp]
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell)
)
add_temp
add_temp <- data.frame(
cell = smp_cell,
x = terra::xFromCell(raster, smp_cell),
y = terra::yFromCell(raster, smp_cell)
)
validCandidates <- validCandidates[-smp]
if (nrow(add_strata) == 0) {
add_strata <- add_temp[, c("x", "y")]
nCount <-  nCount + 1
#--- If add_strata isnt empty, check distance with all other sampled cells in strata ---#
} else {
dist <- crossdist(add_temp$x, add_temp$y , add_strata$x , add_strata$y)
#--- If all less than 'mindist' - accept sampled cell otherwise reject ---#
if (all(as.numeric(dist) > mindist)) {
add_strata <- rbind(add_strata, add_temp[, c("x", "y")])
nCount <-  nCount + 1
}
}
add_temp[, c("x", "y")]
add_strata <- add_temp[, c("x", "y")]
add_strata
load_all()
k <- sample_srs(raster = raster,ns = 200, access = roads, buff_inner = 100, buff_outer = 200,mindist = 100)
k <- sample_srs(raster = raster,ns = 200)
k <- sample_srs(raster = raster,ns = 200, mindist = 200)
k <- sample_srs(raster = raster,ns = 200, mindist = 200,access = roads,buff_inner = 200,buff_outer = 800)
extract_metrics(raster,k)
k <- sample_strat(raster = raster,ns = 200, mindist = 200,access = roads,buff_inner = 20,buff_outer = 80,buff_extend = 20,buff_max = 100)
k <- sample_strat(raster = kmeans$raster,ns = 200, mindist = 200,access = roads,buff_inner = 20,buff_outer = 80,buff_extend = 20,buff_max = 100)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
### sgsR vignette ###
#--- import ALS metrics raster ---#
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- vect(system.file("extdata/inventory_polygons","inventory_polygons.shp", package = "RMFinventory"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- terra::aggregate(poly_subset,dissolve = TRUE)
#--- mask input ALS raster using polygon layer ---#
raster <- terra::mask(raster,poly_subset)
#--- import access layer to be used during sampling if desired ---#
roads <- vect("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/roads/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
srs <- sample_srs(raster = raster,ns = 200, mindist = 200,access = roads,buff_inner = 200,buff_outer = 800)
strat <- sample_strat(raster = kmeans$raster,ns = 200, mindist = 200,access = roads,buff_inner = 20,buff_outer = 80,buff_extend = 20,buff_max = 100)
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 20,buff_outer = 80,buff_extend = 20,buff_max = 100)
load_all()
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 20,buff_outer = 80,buff_extend = 20,buff_max = 100)
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 50,buff_outer = 200,buff_extend = 100,buff_max = 800)
50 > c(10,20,80)
any(50 > c(10,20,80))
load_all()
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 50,buff_outer = 200,buff_extend = 100,buff_max = 20)
load_all()
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 500,buff_outer = 200,buff_extend = 100,buff_max = 200)
load_all()
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 500,buff_outer = 200,buff_extend = 100,buff_max = 200)
sample_strat(raster = kmeans$raster,ns = 200, mindist = 200, access = roads, buff_inner = 50,buff_outer = 200,buff_extend = 100,buff_max = 600)
srs <- sample_srs(raster = raster,
ns = 200,
mindist = 200)
strat <- sample_strat(raster = kmeans$raster,
ns = 200,
mindist = 200)
srs <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 200,
buff_outer = 800)
srs_wo <- sample_srs(raster = raster,
ns = 200,
mindist = 200)
strat_wo <- sample_strat(raster = kmeans$raster,
ns = 200,
mindist = 200)
srs_w <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 200,
buff_outer = 800)
strat_w <- sample_strat(raster = kmeans$raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
strat_w
srs_w <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 200,
buff_outer = 800)
srs_w
strat_w <- sample_strat(raster = pcomp$raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = raster, ncp = 2, b1 = 4, b2 = 3)
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = raster, metric = "wal_5", metric2 = "wal_2", b = 10, b2 = 5)
load_all()
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = raster, ncp = 2, b1 = 4, b2 = 3)
strat_w <- sample_strat(raster = pcomp$raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
strat_w
load_all()
strat_w <- sample_strat(raster = pcomp$raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
load_all()
strat_w <- sample_strat(raster = pcomp$raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
load(devtools)
library(devtools)
load_all()
use_r("extract_existing")
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- vect(system.file("extdata/inventory_polygons","inventory_polygons.shp", package = "RMFinventory"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- terra::aggregate(poly_subset,dissolve = TRUE)
raster <- terra::mask(raster,poly_subset)
roads <- vect("C:/Users/goodb/Documents/UBC/post_doc/RMFinventory/inst/extdata/roads/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = raster[[5]], k = 4)
srs_wo <- sample_srs(raster = raster,
ns = 200,
mindist = 200)
srs_wo
load_all()
extract_existing(kmeans$raster,srs_wo)
srs_wo
extract_existing(kmeans$raster,srs_wo)
srs <- st_coordinates(srs_wo)
srs
names(srs) <- c("a","b")
extract_existing(kmeans$raster,srs)
class(srs)
srs <- as.data.frame(srs)
str(srs)
extract_existing(kmeans$raster,srs)
class(srs)
load_all()
extract_existing(kmeans$raster,srs)
extract_existing(kmeans$raster,srs)
load_all()
extract_existing(kmeans$raster,srs)\
extract_existing(kmeans$raster,srs)
head(srs)
colnames(srs)
load_all()
extract_existing(kmeans$raster,srs)
load_all()
extract_existing(kmeans$raster,srs)
load_all()
extract_existing(kmeans$raster,srs)
