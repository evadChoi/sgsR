dplyr::summarize(have = n())
strata <- count <- freq <- need <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = n()) %>%
dplyr::mutate(
freq = count / sum(count),
need = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(need = replace(need, need < 1, 1)) %>%
dplyr::mutate(need = round(need)) %>%
dplyr::select(strata, need) %>%
as.data.frame()
toSample
existing <- data.frame(strata = existing$strata)
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(have = n())
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical. Consider using `extract_strata()`.")
}
toSample$have <- existing$have
toSample
existing = e.sr
existing <- data.frame(strata = existing$strata)
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(have = n())
existing
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(have = n())
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical. Consider using `extract_strata()`.")
}
toSample$have <- existing$have
toSample
existing = e.sr
existing <- data.frame(strata = existing$strata)
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(have = n())
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical. Consider using `extract_strata()`.")
}
toSample$have <- existing$have
existing$have
toSample$have
toSample
toSample %>%
dplyr::mutate(difference = need - have)
existing = e.sr
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
diff <- sum(toSample$total) - nSamp
if (diff != 0) {
if (diff > 0) {
#--- determine the largest total samples size among strata ---#
maxTotal <- max(toSample$total)
#--- subtract 'diff' from largest sample size ---#
toSample <- toSample %>%
dplyr::mutate(total = replace(
total,
total == maxTotal,
maxTotal - abs(diff)
))
} else {
#--- determine the largest total samples size among strata ---#
minTotal <- min(toSample$total)
#--- add 'diff' to smallest sample size ---#
toSample <- toSample %>%
dplyr::mutate(total = replace(
total,
total == minTotal,
minTotal + abs(diff)
))
}
}
existing <- data.frame(strata = existing$strata)
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(eTotal = dplyr::n())
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical")
}
#--- join the 2 df together and subtract the number of existing plots by strata from toSample ---#
toSample <- toSample %>%
dplyr::left_join(existing, by = "strata") %>%
dplyr::mutate(total = total - eTotal) %>%
dplyr::select(-eTotal) %>%
as.data.frame()
toSample
existing
existing$eTotal + toSample$total
toSample$need <- existing$eTotal + toSample$total
toSample
load_all()
load_all()
load_all()
library(devtools)
load_all()
setwd("F:/test")
library(sf)
library(sgsR)
library(terra)
library(dplyr)
##Existing
exist <- st_read("PEP_ALL_clip.shp")
exist
##sraster
sraster <- rast("strata_nat.tif")
as.data.frame(values(sraster)) %>%
group_by(strata) %>%
summarise(count = n())
##Attribue la strate à la PEP existante
e.sr <- extract_strata(sraster = sraster, existing = exist)
min(e.sr$strata)
max(e.sr$strata)
# - all the same because count of pixels in each class is the same
calculate_reqSamples(sraster = sraster,
nSamp = 1612)
#Réatribuer strate aux PEP
e.sr = extract_strata(sraster = sraster,
existing = e.sr)
sraster = sraster
nSamp = 1700
existing = e.sr
include = TRUE
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster)
if (is.null(existing)) {
if (isTRUE(include)) {
stop("'existing' must be provided when 'include' == TRUE")
}
#--- if existing samples do not exist make an empty data.frame called addSamples ---#
addSamples <- data.frame(strata = NA, X = NA, Y = NA)
extraCols <- character(0)
} else {
#--- existing must be either a data.frame or an sf object with columns names 'X' 'Y' 'strata' ---#
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
if (any(!c("strata") %in% names(existing))) {
stop("'existing' must have an attribute named 'strata'")
}
#--- error handling in the presence of 'existing' ---#
if (!inherits(existing, "sf")) {
stop("'existing' must be an 'sf' object")
}
if (inherits(sf::st_geometry(existing), "sfc_POINT")) {
#--- if existing is an sf object extract the coordinates and the strata vector ---#
exist_xy <- sf::st_coordinates(existing)
strata <- existing$strata
existing <- as.data.frame(cbind(strata, exist_xy))
} else {
stop("'existing' geometry type must be 'sfc_POINT'")
}
#--- if existing samples do exist ensure proper naming convention ---#
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("'existing' column coordinate names are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
addSamples <- existing
}
addSamples
extraCols <- colnames(existing)[!colnames(existing) %in% c("X", "Y", "strata")]
# Transform strata to numeric if factor
if (is(addSamples$strata, "factor")) {
addSamples$strata <- as.numeric(as.character(addSamples$strata))
}
if (isTRUE(include)) {
message("'existing' samples being included in 'n' calculation")
toSample <- calculate_reqSamples(sraster, nSamp, existing)
} else {
toSample <- calculate_reqSamples(sraster, nSamp)
}
toSample
i=15
s <- as.numeric(toSample[i, 1])
n <- as.numeric(toSample[i, 2])
message(paste0("Processing strata : ", s))
n
#--- Initiate number of sampled cells ---#
add_strata <- addSamples %>%
dplyr::filter(strata == s)
if (nrow(add_strata) > 0) {
add_strata$type <- "existing"
if (!"rule" %in% colnames(add_strata)) {
add_strata$rule <- "existing"
}
}
i
out <- add_strata
i=18
out
s <- as.numeric(toSample[i, 1])
n <- as.numeric(toSample[i, 2])
message(paste0("Processing strata : ", s))
s
n
#--- sample total needed from existing ---#
need <- as.numeric(toSample[i, 3])
need
message(paste0("'include = TRUE` - Stratum ", s, " overrepresented - ", abs(n), " samples removed." ))
add_strata <- addSamples %>%
dplyr::filter(strata == s) %>%
dplyr::sample_n(need)
add_strata
nrow(add_strata)
add_strata$type <- "existing"
add_strata$rule <- "existing"
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE)
x
t <- sample_strat(sraster = sraster, nSamp = 610, existing = e.sr, plot = TRUE, include = TRUE)
t
nSamp = 610
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
toSample
diff <- sum(toSample$total) - nSamp
diff
minTotal <- min(toSample$total)
minTotal
toSample %>%
dplyr::mutate(total = replace(
total,
total == minTotal,
minTotal + abs(diff)
))
sum(toSample$total)
sum(toSample$total) - nSamp
diff <- sum(toSample$total) - nSamp
diff
vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
)
vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
sum(toSample$total)
vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1))
min(toSample$total)
minTotal
toSample %>%
dplyr::mutate(total = replace(
total,
total == minTotal,
minTotal + abs(diff)
))
minTotal
toSample %>%
dplyr::mutate(total = replace(
total,
total == minTotal,
minTotal + abs(diff)
))
toSample
toSample %>%
dplyr::mutate(total = replace(
total,
total == maxTotal,
maxTotal - abs(diff)
))
maxTotal <- max(toSample$total)
toSample %>%
dplyr::mutate(total = replace(
total,
total == maxTotal,
maxTotal - abs(diff)
))
diff
max(vals$strata)
vals$strata
max(toSample$strata)
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
diff <- sum(toSample$total) - nSamp
if (diff != 0) {
message(paste0(nSamp, " does not divide perfectly into ", max(toSample$strata), "strata. nSamp will slightly different than input value"))
# if (diff > 0) {
#
#   #--- determine the largest total samples size among strata ---#
#
#   maxTotal <- max(toSample$total)
#
#   #--- subtract 'diff' from largest sample size ---#
#
#   toSample <- toSample %>%
#     dplyr::mutate(total = replace(
#       total,
#       total == maxTotal,
#       maxTotal - abs(diff)
#     ))
# } else {
#
#   #--- determine the largest total samples size among strata ---#
#
#   minTotal <- min(toSample$total)
#
#   #--- add 'diff' to smallest sample size ---#
#
#   toSample <- toSample %>%
#     dplyr::mutate(total = replace(
#       total,
#       total == minTotal,
#       minTotal + abs(diff)
#     ))
# }
}
message(paste0("nSamp of ",nSamp, " does not divide perfectly into ", max(toSample$strata), " strata. nSamp will slightly different than input value"))
message(paste0("nSamp of ",nSamp, " does not divide perfectly into ", max(toSample$strata), " strata. nSamp will differ to input value slightly"))
610/100
sum(toSample$total)
message(paste0("nSamp of ",nSamp, " does not divide equally into ", max(toSample$strata), " strata. nSamp of ", sum(toSample$total), " returned."))
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
diff <- sum(toSample$total) - nSamp
if (diff != 0) {
message(paste0("nSamp of ",nSamp, " does not divide equally into ", max(toSample$strata), " strata. nSamp of ", sum(toSample$total), " returned."))
# if (diff > 0) {
#
#   #--- determine the largest total samples size among strata ---#
#
#   maxTotal <- max(toSample$total)
#
#   #--- subtract 'diff' from largest sample size ---#
#
#   toSample <- toSample %>%
#     dplyr::mutate(total = replace(
#       total,
#       total == maxTotal,
#       maxTotal - abs(diff)
#     ))
# } else {
#
#   #--- determine the largest total samples size among strata ---#
#
#   minTotal <- min(toSample$total)
#
#   #--- add 'diff' to smallest sample size ---#
#
#   toSample <- toSample %>%
#     dplyr::mutate(total = replace(
#       total,
#       total == minTotal,
#       minTotal + abs(diff)
#     ))
# }
}
existing <- data.frame(strata = existing$strata)
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(eTotal = dplyr::n())
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical")
}
#--- join the 2 df together and subtract the number of existing plots by strata from toSample ---#
toSample <- toSample %>%
dplyr::left_join(existing, by = "strata") %>%
dplyr::mutate(total = total - eTotal) %>%
dplyr::select(-eTotal) %>%
as.data.frame()
toSample$need <- existing$eTotal + toSample$total
toSample
t <- sample_strat(sraster = sraster, nSamp = 610, existing = e.sr, plot = TRUE, include = TRUE)
load_all()
