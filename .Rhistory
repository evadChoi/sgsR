dplyr::select(strata, total)
toSample
sum(toSample$total) - nSamp
existing <- data.frame(strata = existing$strata)
existing
existing
existing <- e.sr
existing <- data.frame(strata = existing$strata)
existing
existing <- existing %>%
dplyr::group_by(strata) %>%
dplyr::arrange() %>%
dplyr::summarize(eTotal = dplyr::n())
existing
#--- if the strata for toSample and existing are not identical throw an error ---#
if (!identical(unique(existing$strata), unique(toSample$strata))) {
stop("Strata for 'sraster' and 'existing' are not identical. Consider using extract_strata().")
}
toSample %>%
dplyr::left_join(existing, by = "strata") %>%
dplyr::mutate(total = total - eTotal) %>%
dplyr::select(-eTotal) %>%
as.data.frame()
existing$eTotal + toSample$total
existing$eTotal
toSample$total
toSample$need <- existing$eTotal + toSample$total
toSample
load_all()
calculate_allocation(sraster = sraster, nSamp = 321, existing = e.sr)
k <- calculate_allocation(sraster = sraster, nSamp = 321, existing = e.sr)
sum(k$need)
k <- calculate_allocation(sraster = sraster, ,allocation = "optim", mraster = mraster, metric = 1, nSamp = 321, existing = e.sr)
k
sum(k$need)
document()
?sample_strat
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
mraster = mraster,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
mraster = mraster,
metric = 1,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "optim",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
load_all()
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
include = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200, # desired sample number
allocation = "prop",
mraster = mraster,
metric = 1,
force = TRUE,
access = access, # define access road network
existing = e.sr, # existing samples with strata values
mindist = 200, # minimum distance samples must be apart from one another
buff_inner = 50, # inner buffer - no samples within this distance from road
buff_outer = 200, # outer buffer - no samples further than this distance from road
plot = TRUE) # plot
sample_strat(sraster = sraster, # input sraster
nSamp = 200)
calculate_allocation(sraster = sr,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mr,
metric = 1)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1,
force = TRUE)
load_all()
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1,
force = TRUE)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1,
force = TRUE)
sum(k$total)
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
loaD_all()
load_all()
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr,
allocation = "optim",
mraster = mraster,
metric = 1)
k <- calculate_allocation(sraster = sraster,
nSamp = 200,
existing = e.sr)
sample_strat(sraster = sraster,
nSamp = 200,
allocation = "optim",
mraster = mraster,
metric = 1,
access = access,
buff_inner = 50,
buff_outer = 200,
filename = tempfile(fileext = ".shp"))
sample_strat(sraster = sraster,
nSamp = 200,
allocation = "optim",
mraster = mraster,
metric = 1,
access = access,
buff_inner = 50,
buff_outer = 200,
filename = tempfile(fileext = ".shp"))
library(devtools)
load_all()
library(sp)
?st_make_grid
use_r("sample_systematic")
load_all()
load_all()
document()
load_all()
document()
help(sample_systematic)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1:6]], nStrata = 10)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
sample_systematic(raster = mraster, cellsize = 400, square = FALSE)
sample_systematic(raster = mraster, cellsize = 400, square = FALSE, plot = TRUE)
sample_systematic(raster = mraster, cellsize = 400, square = FALSE, centers = FALSE, plot = TRUE)
sample_systematic(raster = mraster, cellsize = 400, square = TRUE, centers = FALSE, plot = TRUE)
sample_systematic(raster = mraster, cellsize = 400, square = TRUE, centers = TRUE, plot = TRUE)
raster = mraster
sfObj <- sf::st_as_sf(terra::as.polygons(terra::ext(raster), crs = terra::crs(raster)))
square = TRUE
cellsize = 200
polys <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = "polygons", crs = terra::crs(raster)))
plot(polys)
polys
polySamp <- rep(1, nrow(polys))
polySamp
samples <- st_sample(nc, polySamp)
samples <- sf::st_sample(polys, polySamp)
samples <- sf::st_sample(polys, 1)
samples
samples <- sf::st_sample(polys,size = 1, by_polygon = TRUE)
samples
polys <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = FALSE, what = "polygons", crs = terra::crs(raster)))
plot(polys)
spsample(x = sfObj, type = "hexagonal", cellsize = cellsize)
sp::spsample(x = sfObj, type = "hexagonal", cellsize = cellsize)
library(sp)
sp::spsample(x = sfObj, type = "hexagonal", cellsize = cellsize)
sfObj
sp::spsample(x = as_Spatial(sfObj), type = "hexagonal", cellsize = cellsize)
plot(sp::spsample(x = as_Spatial(sfObj), type = "hexagonal", cellsize = cellsize))
sp::spsample(x = polys, type = "stratified", cellsize = cellsize)
sp::spsample(x = as_Spatial(polys), type = "stratified", cellsize = cellsize)
polys
plot(polys)
poly_plot <- sp::spsample(x = as_Spatial(polys), type = "stratified", cellsize = cellsize)
plot(poly_plot, add = TRUE)
plot(polys)
sf::st_sample(polys, type = "regular")
sf::st_sample(polys, size = nrow(polys), type = "regular")
r <- sf::st_sample(polys, size = nrow(polys), type = "regular")
plot(polys)
plot(r, add = TRUE)
polys <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = "polygons", crs = terra::crs(raster)))
polys
polys
r <- sf::st_sample(polys, size = nrow(polys), type = "random", by_polygon = TRUE)
plot(r)
r <- sf::st_sample(polys, size = nrow(polys), type = "random", by_polygon = FALSE)
plot(r)
r <- sf::st_sample(polys, size = nrow(polys), type = "random", by_polygon = FALSE)
plot(r)
r <- sf::st_sample(polys, size = nrow(polys), type = "regular", by_polygon = FALSE)
plot(r)
r <- sf::st_sample(polys, size = nrow(polys), type = "regular", by_polygon = TRUE)
plot(r)
polys <- st_cast(sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = "polygons", crs = terra::crs(raster))), "MULTIPOLYGON")
polys
r <- sf::st_sample(polys, size = nrow(polys), type = "random", by_polygon = TRUE)
plot(polys)
plot(r, add = TRUE)
polys <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = "polygons", crs = terra::crs(raster)))
polys
r <- sf::st_sample(polys, size = nrow(polys), type = "random", by_polygon = TRUE)
plot(polys)
plot(r, add = TRUE)
load_all()
sample_systematic(mraster, cellsize = 500, square = FALSE, plot = TRUE)
load_all()
sample_systematic(mraster, cellsize = 500, square = FALSE, plot = TRUE)
sample_systematic(mraster, cellsize = 500, square = TRUE, plot = TRUE)
sample_systematic(mraster, cellsize = 500, square = TRUE, plot = TRUE, access = access, buff_in = 50, buff_out = 300)
sample_systematic(mraster, cellsize = 500, square = TRUE, plot = TRUE, access = roads, buff_in = 50, buff_out = 300)
document()
help(sample_systematic)
document()
library(devtools)
load_all()
#--- import ALS metrics raster ---#
raster <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
sample_systematic(raster = mraster, cellsize = 2000, square = FALSE)
load_all()
sample_systematic(raster = mraster, cellsize = 2000, square = FALSE)
load_all()
sample_systematic(raster = mraster, cellsize = 2000, square = FALSE)
raster <- mraster
#--- determine crs of input raster ---#
crs <- terra::crs(raster, proj = TRUE)
rasterP <- raster
sfObj <- sf::st_as_sf(terra::as.polygons(terra::ext(raster), crs = terra::crs(raster)))
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster)))
square = TRUE
what = "centers"
cellsize = 2000
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster)))
location = "centers"
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster)))
samples
sf::st_geometry(samples) <- "geometry"
sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster))) %>%
dplyr::rename(geometry = x)
sf::st_geometry(samples) <- "geometry"
samples %>%
dplyr::filter(!is.na(.)) %>%
dplyr::select(-geometry)
samples
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster))) %>%
dplyr::rename(geometry = x)
samples
sf::st_geometry(samples) <- "geometry"
samples
samples %>%
dplyr::filter(!is.na(.))
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster))) %>%
dplyr::rename(geometry = x) %>%
extract_metrics(mraster = raster, existing = .)
samples
sf::st_geometry(samples) <- "geometry"
samples <- samples %>%
dplyr::filter(!is.na(.)) %>%
dplyr::select(-geometry)
samples
sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster), ...)) %>%
dplyr::rename(geometry = x) %>%
extract_metrics(mraster = raster[1], existing = .)
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster))) %>%
dplyr::rename(geometry = x) %>%
extract_metrics(mraster = raster[1], existing = .)
raster
samples <- sf::st_as_sf(sf::st_make_grid(sfObj, cellsize, square = square, what = location, crs = terra::crs(raster))) %>%
dplyr::rename(geometry = x) %>%
extract_metrics(mraster = raster[[1]], existing = .)
samples
load_all()
