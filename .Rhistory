dplyr::select(-eTotal) %>%
as.data.frame()
#--- determine crs of input raster ---#
crs <- crs(raster)
vals <- values(raster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
na.omit() %>%
group_by(strata) %>%
summarize(n= n()) %>%
mutate(freq = n / sum(n),
total = freq*ns) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
mutate(total = replace(total, total < 1, 1)) %>%
mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
diff <- sum(toSample$total) - ns
diff
if ( diff != 0 ) {
if ( diff > 0 ) {
#--- determine the largest total samples size among strata ---#
maxTotal <- max(toSample$total)
#--- subtract 'diff' from largest sample size ---#
toSample <- toSample %>%
mutate(total = replace(total,
total == maxTotal,
maxTotal - abs(diff))
)
} else {
#--- determine the largest total samples size among strata ---#
minTotal <- min(toSample$total)
#--- add 'diff' to smallest sample size ---#
toSample <- toSample %>%
mutate(total = replace(total,
total == minTotal,
minTotal + abs(diff))
)
}
}
toSample
diff <- sum(toSample$total) - ns
diff
existings <- data.frame(strata = existing$strata)
existings <- existings %>%
group_by(strata) %>%
arrange() %>%
summarize(eTotal= n())
toSample <- toSample %>%
left_join(existings, by = "strata") %>%
mutate(total = total - eTotal) %>%
dplyr::select(-eTotal) %>%
as.data.frame()
toSample
sum(toSample$total)
srs_wo <- sample_srs(raster = raster,
ns = 50,
mindist = 200)
existing <- extract_existing(raster,srs_wo)
existings
load_all()
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
metrics
metrics <- extract_metrics(wall_poly,strat_w_e$samples,data.frame = TRUE)
metrics
load_all()
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
strat_w_e
load_all()
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/inventory_polygons.shp")
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- st_union(poly_subset)
poly_subset <- vect(poly_subset)
wall_poly <- terra::mask(raster,poly_subset)
roads <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = wall_poly[[5]], k = 4) ### note some values of k dont seem to give the right output
#--- define desired stratification raster ---#
raster <- kmeans$raster
srs_wo <- sample_srs(raster = raster,
ns = 50,
mindist = 200)
strat_wo <- sample_strat(raster = raster,
ns = 50,
mindist = 200)
srs_w <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
strat_w <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
existing <- extract_existing(raster,srs_wo)
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
strat_w_e
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
strat_w_e
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
metrics
strat_w_e
strat_w_e$samples
as.data.frame(strat_w_e$samples)
load_all()
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
strat_w_e$samples
as.data.frame(strat_w_e$samples)
names(as.data.frame(strat_w_e$samples))
samp_metss <- as.data.frame(strat_w_e$samples)
dplyr::select(samp_metss, -geometry)
load_all()
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
samples <- strat_w_e
samples
xy <- st_coordinates(samples)
vals <- terra::extract(raster,xy)
samples <- strat_w_e$samples
samples
xy <- st_coordinates(samples)
vals <- terra::extract(raster,xy)
samp_mets <- as.data.frame(samples$samples)
samp_mets <-  dplyr::select(samp_mets, -geometry)
samp_mets
load_all()
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/inventory_polygons.shp")
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- st_union(poly_subset)
poly_subset <- vect(poly_subset)
wall_poly <- terra::mask(raster,poly_subset)
roads <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = wall_poly[[5]], k = 4) ### note some values of k dont seem to give the right output
srs_wo <- sample_srs(raster = raster,
ns = 50,
mindist = 200)
strat_wo <- sample_strat(raster = raster,
ns = 50,
mindist = 200)
srs_w <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
strat_w <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
existing <- extract_existing(raster,srs_wo)
#--- define desired stratification raster ---#
raster <- kmeans$raster
raster
srs_wo <- sample_srs(raster = raster,
ns = 50,
mindist = 200)
strat_wo <- sample_strat(raster = raster,
ns = 50,
mindist = 200)
srs_w <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
strat_w <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
existing <- extract_existing(raster,srs_wo)
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE, #include the existing samples provided in the value defined by 'ns'
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
metrics
load_all()
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
metrics
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE, #include the existing samples provided in the value defined by 'ns'
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
metrics <- extract_metrics(wall_poly,strat_w_e$samples)
metrics
length(raster)
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/wall_metrics_small.tif")
length(raster)
raster
nlyr(raster)
names(raster)
any(! c("strata") %in% names(raster))
load_all()
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/inventory_polygons.shp")
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- st_union(poly_subset)
poly_subset <- vect(poly_subset)
wall_poly <- terra::mask(raster,poly_subset)
roads <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/roads.shp")
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = wall_poly[[5]], k = 4) ### note some values of k dont seem to give the right output
raster <- c(raster,kmeans$raster)
raster
names(raster)
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE, #include the existing samples provided in the value defined by 'ns'
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
strat_w_e
load_all()
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE, #include the existing samples provided in the value defined by 'ns'
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
load_all()
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE, #include the existing samples provided in the value defined by 'ns'
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
install_github("tgoodbody/sgsR")
detach("package:sgsR", unload=TRUE)
install_github("tgoodbody/sgsR")
devtools::install_github("https://github.com/tgoodbody/sgsR")
library(sgsR)
use_data_raw()
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/wall_metrics_small.tif")
use_data(raster)
use_data(roads)
roads <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/roads.shp")
load_all()
use_package()
use_package(c("terra",
"sf",
"sp",
"dplyr",
"tidyr",
"purrr",
"RColorBrewer",
"stratifyR",
"ggplot2",
"factoextra",
"FactoMineR",
"spatstat"))
use_package("terra")
use_package("sf")
use_package("sp")
use_package("dplyr")
use_package("tidyr")
use_package("purrr")
use_package("RColorBrewer")
use_package("stratifyR")
use_package("ggplot2")
use_package("factoextra")
use_package("factoMineR")
use_package("FactoMineR")
use_package("spatstat")
load_all()
load_all()
raster <- rast("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/wall_metrics_small.tif")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/inventory_polygons.shp")
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- st_union(poly_subset)
poly_subset <- vect(poly_subset)
wall_poly <- terra::mask(raster,
poly_subset)
roads <- st_read("C:/Users/goodb/Documents/UBC/post_doc/sgsR/vig/data/roads.shp")
use_data(roads)
use_data(poly)
document()
help(sample_srs)
help(strat_kmeans)
document()
help(sample_strat)
help(sample_srs)
document()
help(sample_existing)
help(extract_existing)
document()
help(strat_kmeans)
document()
help(strat_metrics)
document()
help(strat_metrics)
document()
document()
load_all()
help(sgsR::strat_pcomp)
usethis::use_vignette("sgsR-vignette")
document()
document()
usethis::use_testthat()
document()
load_all()
test()
check()
document()
check()
check()
document()
check()
document()
check()
document()
check()
load_all()
#--- import ALS metrics raster ---#
raster <- terra::rast(system.file("extdata", "wall_metrics_small.tif", package = "sgsR"))
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- sf::st_read(system.file("extdata", "inventory_polygons.shp", package = "sgsR"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(raster,
poly_subset)
#--- import access layer to be used during sampling if desired ---#
roads <- st_read(system.file("extdata", "roads.shp", package = "sgsR"))
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = wall_poly[[5]],
k = 4) ### note some values of k dont seem to give the right output
## maybe this is related to the raster layers?
#--- perform stratification using OSB ---#
#--- note that this one can take a while ---#
osb <- strat_osb(raster = wall_poly,
metric = "wal_5",
h = 4,
n = 100) # should integrate functionality to do 2 metrics concurrently and create unique strata
#--- import ALS metrics raster ---#
raster <- terra::rast(system.file("extdata", "wall_metrics_small.tif", package = "sgsR"))
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- sf::st_read(system.file("extdata", "inventory_polygons.shp", package = "sgsR"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(raster,
poly_subset)
#--- import access layer to be used during sampling if desired ---#
roads <- st_read(system.file("extdata", "roads.shp", package = "sgsR"))
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = wall_poly[[5]],
k = 4) ### note some values of k dont seem to give the right output
## maybe this is related to the raster layers?
#--- perform stratification using OSB ---#
#--- note that this one can take a while ---#
osb <- strat_osb(raster = wall_poly,
metric = "wal_5",
h = 4,
n = 100) # should integrate functionality to do 2 metrics concurrently and create unique strata
#--- import ALS metrics raster ---#
raster <- terra::rast(system.file("extdata", "wall_metrics_small.tif", package = "sgsR"))
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- sf::st_read(system.file("extdata", "inventory_polygons.shp", package = "sgsR"))
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(raster,
poly_subset)
#--- import access layer to be used during sampling if desired ---#
roads <- st_read(system.file("extdata", "roads.shp", package = "sgsR"))
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(raster = wall_poly[[5]],
k = 4) ### note some values of k dont seem to give the right output
## maybe this is related to the raster layers?
#--- perform stratification using OSB ---#
#--- note that this one can take a while ---#
# osb <- strat_osb(raster = wall_poly,
#                  metric = "wal_5",
#                  h = 4,
#                  n = 100) # should integrate functionality to do 2 metrics concurrently and create unique strata
#--- perform stratification using principal components ---#
pcomp <- strat_pcomp(raster = wall_poly,
ncp = 2,
b1 = 4,
b2 = 3) # should integrate functionality to allow users to define strata based on more than just PC1 and PC2
#--- perform stratification using individual metrics ---#
metrics <- strat_metrics(raster = wall_poly,
metric = "wal_5",
metric2 = "wal_2",
b = 10,
b2 = 5)
#--- define desired stratification raster ---#
raster <- kmeans$raster
#--- sampling **without** access defined---#
srs_wo <- sample_srs(raster = raster,
ns = 50,
mindist = 200)
strat_wo <- sample_strat(raster = raster,
ns = 50,
mindist = 200)
#--- sampling **with** access defined---#
srs_w <- sample_srs(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200)
strat_w <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
#--- extract strata from raster for already existing sample network ---#
#--- we use random samples defined above ---#
existing <- extract_existing(raster,
srs_wo)
#--- sampling **with** access defined **and** existing samples defined ---#
strat_w_e <- sample_strat(raster = raster,
ns = 200,
mindist = 200,
access = roads,
existing = existing,
include = TRUE, #include the existing samples provided in the value defined by 'ns'
buff_inner = 50,
buff_outer = 200,
buff_extend = 100,
buff_max = 600)
#--- extract metrics from multi-band ALS raster for potential modeling ---#
metrics <- extract_metrics(wall_poly,
strat_w_e$samples)
load_all()
check()
check()
check()
library(RColorBrewer)
check()
check()
load_all()
