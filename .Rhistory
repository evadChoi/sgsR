poly_subset)
terra::plot(wall_poly[[1:2]])
wall_poly[[1:5]]
wall_poly[[1:5]] %>% strat_quantiles(metric = "zsd", nStrata = 4, plot = TRUE)
wall_poly[[1:5]] %>% strat_pcomp(nStrata = 4, nStrata = 5, plot = TRUE)
wall_poly[[1:5]] %>% strat_pcomp(nStrata = 4, nStrata2 = 5, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_srs(nSamp = 200, mindist = 100, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 200, mindist = 500, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 200, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 200)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 200, plot = TRUE)
load_all()
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 200, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5, plot = TRUE) %>%
sample_grid(gridsize = 500, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
load_all()
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
load_all()
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_grid(gridsize = 500, plot = TRUE)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 400, mindist = 100) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 400, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]]) %>%
filter(strata == 2)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]]) %>%
filter(strata = 2)
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
unique(k$strata)
st_distance(k)
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]],data.frame = TRUE)
k
st_distance(k'')
st_distance(k)
rbind(k,k)
k
nrow(k)
nrow(rbind(k,k))
st_distance(k)
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
st_distance(k)
load_all()
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
add_temp <- add_temp %>%
as.data.frame() %>%
sf::st_as_sf(., coords = c("X", "Y"))
add_temp
load_all()
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
add_temp <- add_temp %>%
as.data.frame() %>%
sf::st_as_sf(., coords = c("X", "Y"))
add_temp
add_strata <- add_temp[, c("strata", "type", "rule", extraCols)]
add_strata
load_all()
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
add_temp <- add_temp %>%
as.data.frame() %>%
sf::st_as_sf(., coords = c("X", "Y"))
add_strata <- add_temp
add_strata
dist <- sf::st_distance(add_strata)
dist
add_strata <- rbind(add_strata, add_temp)
add_strata
load_all()
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
load_all()
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
k
load_all()
k <- wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 2, nStrata2 = 2) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
k
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd") %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd",nStrata = 4, nStrata2 = 7) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd",nStrata = 4, nStrata2 = 7)
k
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd",nStrata = 4, nStrata2 = 7) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
load_all()
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd",nStrata = 4, nStrata2 = 7) %>%
sample_strat(nSamp = 70, mindist = 100, plot = TRUE)
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd",nStrata = 4, nStrata2 = 7)
k <- wall_poly[[1:5]] %>%
strat_quantiles(metric = "zmax", metric2 = "zsd",nStrata = 4, nStrata2 = 7) %>%
sample_strat(nSamp = 70, plot = TRUE)
sample_strat(k, nSamp = 70)
load_all()
sample_strat(k, nSamp = 70)
load_all()
sample_strat(k, nSamp = 70)
sample_strat(k, nSamp = 20)
k
sample_strat(k, nSamp = 200)
sample_strat(k, nSamp = 200)
load_all()
sample_strat(k, nSamp = 200)
sample_strat(k, nSamp = 70)
sample_strat(k, nSamp = 10)
sample_strat(k, nSamp = 200)
sample_strat(k, nSamp = 28)
sample_strat(k, nSamp = 40)
load_all()
k
load_all()
document()
document()
load_all()
document()
load_all()
strat_kmeans(wall_poly,nStrata = 20)
k <- strat_kmeans(wall_poly,nStrata = 20)
plot(k)
k <- strat_kmeans(wall_poly,nStrata = 6)
plot(k)
document()
load_all()
k <- strat_kmeans(wall_poly,nStrata = 6)
plot(k)
k
k <- strat_kmeans(wall_poly,nStrata = 6)
km_clust
unique(km_clust$centers)
km_clust$cluster
unique(km_clust$cluster)
idx
vals[idx]
vals[idx,]
vals <- terra::values(mraster)
vals
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
idx
km_clust <- stats::kmeans(scale(na.omit(vals), center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
km_clust$cluster
scale(vals[idx], center = center, scale = scale)
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
km_clust
plot(km_clust)
vals[idx] <- km_clust$cluster
vals[idx]
unique(vals)
vals[idx]$class <- km_clust$cluster
vals[idx]
km_clust$cluster
vals[idx,1]
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[idx] <- km_clust$cluster
vals
vals[idx]
vals[idx]
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
vals[idx]
km_clust$cluster
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[idx] <- km_clust$cluster
vals
vals
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
km_clust
unique(km_clust$cluster)
vals
km_clust$cluster
length(km_clust$cluster)
nrown(vals[idx])
nrow(vals[idx])
ncell(vals[idx])
vals <- as.data.frame(vals)
vals[idx]
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals <- as.data.frame(vals)
vals[idx] <- km_clust$cluster
kmv <- terra::setValues(mraster[[1]], vals)
names(kmv) <- "strata"
vals[idx]
class(vals)
type(vals)
str(vals)
v <- as.data.frame(vals$zmax)
v
v <- as.data.frame(vals$zmax)
v[idx] <- km_clust$cluster
v <- as.data.frame(vals$zmax)
v[idx,] <- km_clust$cluster
v <- as.data.frame(vals$zmax)
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[idx] <- km_clust$cluster
kmv <- terra::setValues(mraster[[1]], vals)
names(kmv) <- "strata"
plot(kmv)
terra::plot(kmv)
vals <- terra::values(mraster) %>%
as.data.frame()
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[idx] <- km_clust$cluster
vals
km_clust$cluster
vals[idx,1]
vals <- terra::values(mraster) %>%
as.data.frame()
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[idx,1] <- km_clust$cluster
vals$strata[which(!is.na(vals))] <- km_clust$cluster
vals <- terra::values(mraster) %>%
as.data.frame()
vals[!is.finite(vals)] <- NA
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(na.omit(vals), center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals$strata[which(!is.na(vals))] <- km_clust$cluster
km_clust
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(na.omit(vals), center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
km_clust
vals$strata[which(!is.na(vals))] <- km_clust$cluster
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
fill <- data.frame()
fill[idx] <- km_clust$cluster
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(na.omit(vals), center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
kmv <- mraster[[1]]
values(kmv) <- km_clust$centers
terra::plot(kmv)
values(!is.na(kmv)) <- km_clust$centers
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
km_clust
ncell(vals)
vals[!is.finite(vals)]
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
idx <- !is.na(vals)
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(vals[idx], center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[is.finite(vals)] <- km_clust$cluster
kmv <- terra::setValues(mraster[[1]], vals)
names(kmv) <- "strata"
terra::plot(kmv, main = "K-means clusters", col = col, type = "classes")
plot(kmv)
terra::plot(kmv)
vals <- terra::values(mraster)
vals[!is.finite(vals)] <- NA
message("K-means being performed on ", terra::nlyr(mraster), " layers with ", nStrata, " centers.")
km_clust <- stats::kmeans(scale(na.omit(vals), center = center, scale = scale), centers = nStrata, iter.max = iter, algorithm = algorithm, ...)
vals[is.finite(vals)] <- km_clust$cluster
kmv <- terra::setValues(mraster[[1]], vals)
names(kmv) <- "strata"
terr::plot(kmv)
terra::plot(kmv)
vals
load_all()
load_all()
k <- strat_kmeans(wall_poly,nStrata = 6)
k <- strat_kmeans(wall_poly,nStrata = 20)
k <- strat_kmeans(wall_poly,nStrata = 20, plot = TRUE)
load_all()
k <- strat_kmeans(wall_poly,nStrata = 20, plot = TRUE)
k <- strat_kmeans(wall_poly,nStrata = 20, plot = TRUE, iter = 20)
k <- strat_kmeans(wall_poly,nStrata = 20, plot = TRUE, iter = 40)
k <- strat_kmeans(wall_poly,nStrata = 20, plot = TRUE, iter = 100)
k <- strat_kmeans(wall_poly,nStrata = 20, plot = TRUE, iter = 200)
wall_poly[[1:5]] %>%
strat_pcomp(nStrata = 4, nStrata2 = 5) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_kmeans(nStrata = 10) %>%
sample_grid(gridsize = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
wall_poly[[1:5]] %>%
strat_kmeans(nStrata = 10) %>%
sample_strat(nSamp = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
load_all()
wall_poly[[1:5]] %>%
strat_kmeans(nStrata = 10) %>%
sample_strat(nSamp = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
load_all()
library(devtools)
load_all()
wall_poly[[1:5]] %>%
strat_kmeans(nStrata = 10) %>%
sample_strat(nSamp = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 6)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nStrata = 6)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
wall_poly[[1:5]] %>%
strat_kmeans(nStrata = 10) %>%
sample_strat(nSamp = 500, plot = TRUE) %>%
extract_metrics(mraster = wall_poly[[1:5]])
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 75,
plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(raster = raster, #srs_wo
n = 75,
plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(raster = kmeans, #srs_wo
n = 75,
plot = TRUE)
#--- define desired stratification raster ---#
raster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(raster = raster, #srs_wo
n = 75,
plot = TRUE)
kk <- calculate_COOBS(mraster = wall_poly[[1:3]], existing = existing, cores = 8)
load_all()
load_all()
kk <- calculate_COOBS(mraster = wall_poly[[1:3]], existing = existing, cores = 8)
load_all()
kk <- calculate_COOBS(mraster = wall_poly[[1:3]], existing = existing, cores = 8)
library(foreach)
kk <- calculate_COOBS(mraster = wall_poly[[1:3]], existing = existing, cores = 8)
kk
plot(kk)
plot(kk$COOBclass)
use_tidy_style(strict = TRUE)
use_tidy_style(strict = TRUE)
