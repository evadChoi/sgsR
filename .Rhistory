t <- terra::rasterize(buff_in,mraster[[1]])
kk <- terra::distance(mraster[[1]],roads)
kk[kk <= 50] <- NA
mmm <- mask(x = mraster[[1]], mask = t, inverse = TRUE)
plot(nnn)
plot(mmm)
buff_in <- terra::buffer(x = roads,
width = 50)
t <- terra::rasterize(buff_in,mraster[[1]])
mmm <- mask(x = mraster[[1]], mask = t, inverse = TRUE)
plot(mmm)
#--- convert vectors to spatVector to synergize with terra raster functions---#
roads <- terra::vect(roads)
buff_in <- terra::buffer(x = roads,
width = 50)
t <- terra::rasterize(buff_in,mraster[[1]])
mmm <- mask(x = mraster[[1]], mask = t, inverse = TRUE)
#--- extract XY coordinates from raster ---#
vals <- terra::as.data.frame(wall_poly[[1:3]],xy=TRUE) %>%
dplyr::rename(X = x,
Y = y)
kk.m <- mask(kk,wall_poly[[1]])
terra::as.data.frame(kk.m,xy=TRUE) %>%
dplyr::rename(X = x,
Y = y)
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
library(devtools)
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 150,
plot = TRUE)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/wall_metrics_small.tif"
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/inventory_polygons.shp" #system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/roads.shp" #system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 150,
plot = TRUE)
#--- import ALS metrics raster ---#
raster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/wall_metrics_small.tif"
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/inventory_polygons.shp" #system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/roads.shp" #system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 150,
plot = TRUE)
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
load_all()
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 10, nSamp = 110, plot = TRUE)
kk <- analyze_COOBS(mraster = t, existing = existing, cores = 3, plot = TRUE)
kk[values(kk) < 5]
kk[kk < 5]
plot(kk[kk < 5])
plot(kk < 5)
plot(kk < 10)
plot(kk < 20)
plot(kk < 30)
load_all()
library(devtools)
load_all()
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
#--- import ALS metrics raster ---#
raster <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/wall_metrics_small.tif"
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/inventory_polygons.shp" #system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- "C:/Users/goodb/Documents/UBC/post_doc/sgsR/inst/extdata/roads.shp" #system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
kmeans
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 150,
plot = TRUE)
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
load_all()
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 10, nSamp = 110, plot = TRUE)
kkk
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 10, nSamp = 20, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, nSamp = 20, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, nSamp = 20, plot = TRUE)
ratio
mat <- matrix( data = c(letters[1:3], as.character( rnorm(9, mean = 0, sd = 1))),
byrow = FALSE,
nrow = 3,
ncol = 4 )
mat
row_indices <- apply( mat2, 1, function( x ) any( x > threshold ) )
mat2 <- apply( mat[, 2:ncol(mat) ], 2, as.numeric )
mat2
threshold <- 0.9
mat2 < threshold
any(mat2 < threshold)
any(mat2 < threshold) == TRUE
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, threshold = 1.2, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, threshold = 1.2, plot = TRUE)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, threshold = 1.2, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, threshold = -1, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, threshold = 0.99, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 20, threshold = 0.95, plot = TRUE)
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 10, threshold = 0.95, plot = TRUE)
document()
help(analyze_HELS)
document()
help(analyze_HELS)
document()
help(analyze_HELS)
load_all()
kkk <- analyze_HELS(mraster = t, existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
kk <- analyze_COOBS(mraster = t, existing = existing, cores = 3, plot = TRUE)
cols <- RColorBrewer::brewer.pal("Spectral")
m <- c(0, 5, "0-5",
6, 10, "6-10",
11, 15, "11-15",
16, 20, "16-20",
21, 25, "21-25",
26, 30, "26-30",
31, 100000, "30+")
m
m <- c(0, 5, "0-5",
6, 10, "6-10",
11, 15, "11-15",
16, 20, "16-20",
21, 25, "21-25",
26, 30, "26-30",
31, 100000, "30+")
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rclmat
rout
kk
m <- c(0, 5, "0-5",
6, 10, "6-10",
11, 15, "11-15",
16, 20, "16-20",
21, 25, "21-25",
26, 30, "26-30",
31, 100000, "30+")
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc1 <- classify(kk, rclmat, include.lowest=TRUE)
r <- rast(nrows=10, ncols=10)
values(r) <- sample(3, ncell(r), replace=TRUE)
is.factor(r)
cls <- c("forest", "water", "urban")
# make the raster start at zero
x <- r - 1
levels(x) <- cls
names(x) <- "land cover"
is.factor(x)
x
r
m <- c(0, 5, 1,
6, 10, 2,
11, 15, 3,
16, 20, 4,
21, 25, 5,
26, 30, 6,
31, 100000, 7)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc1 <- classify(kk, rclmat, include.lowest=TRUE)
rc1
plot(rc1)
hist(rc1)
rclmat
rc1 <- classify(kk, c(0,5,10,15,20,25,30,35), include.lowest=TRUE)
plot(rc1)
is.factor(rc1)
cols <- RColorBrewer::brewer.pal(7, "Spectral")
cols
terra::plot(rout, col = cols)
terra::plot(rc1, col = cols)
load_all()
kk <- analyze_COOBS(mraster = t, existing = existing, cores = 12, plot = TRUE)
load_all()
kk <- analyze_COOBS(mraster = t, existing = existing, cores = 12, plot = TRUE)
rc
rc1
table(values(rc1))
table(values(rc1/ncell(rc1)))
ncell(rc1)
table(values(rc1)/ncell(rc1))
table(rc1)
table(values(rc1))
k <- table(values(rc1))
k / ncell(rc1)
existing
kkkkk <- k / ncell(rc1)
length(existing)
existing$geometry
as.data.frame(existing)
length(as.data.frame(existing))
nrow(existing)
kkkkk <- k / nrow(existing)
kkkkk
k / ncell(rc1)
k / nrow(existing)
k
use_r("calculate_COOBS")
load_all()
document()
load_all()
use_r("sample_aHELS")
document()
load_all()
kkk <- sample_aHELS(mraster = t, existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 400,
plot = TRUE)
existing
kkk <- sample_aHELS(mraster = t, existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 12, plot = TRUE)
load-all()
load_all()
load_all()
t
plot(t)
load_all()
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 12, plot = TRUE)
kk
table(values(kk))
load_all()
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 20,
plot = TRUE)
load_all()
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 12, plot = TRUE)
rc
rc1
r
c(t,rc1)
load_all()
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 4, plot = TRUE)
load_all()
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 4, plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 200,
plot = TRUE)
load_all()
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 4, plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 400,
plot = TRUE)
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 12, plot = TRUE)
#--- define desired stratification raster ---#
sraster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(sraster = sraster, #srs_wo
n = 75,
plot = TRUE)
kk <- calculate_COOBS(mraster = t, existing = existing, cores = 4, plot = TRUE)
kk
plot(kk)
load_all()
help(calculate_COOBS)
load_all()
help(calculate_COOBS)
document()
kkk <- sample_aHELS(mraster = t, existing = existing, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = t, existing = existing, nQuant = 5, threshold = 0.8, plot = TRUE)
kkk <- sample_aHELS(mraster = t, existing = existing, nQuant = 5, threshold = 0.96, plot = TRUE)
kkk
kkk <- sample_aHELS(mraster = wall_poly[[1:6]], existing = existing, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = wall_poly[[1:9]], existing = existing, nQuant = 5, threshold = 0.9, plot = TRUE)
load_all()
kkk <- sample_aHELS(mraster = wall_poly[[1:9]], existing = existing, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = wall_poly[[1:9]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
load_all()
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
load_all()
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
load_all()
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
load_all()
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
load_all()
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 5, nSamp = 100, plot = TRUE)
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 20, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = wall_poly[[1:3]], existing = existing, nQuant = 10, threshold = 0.9, plot = TRUE)
plot(values(kkk$zmax),plot(values(kkk$zmean)))
plot(kkk$zmax,kkk$zmean)
kkk
plot(wall_poly$zmax,wall_poly$zmean)
plot(kkk$zmax,kkk$zmean,add=TRUE,col="red")
plot(wall_poly$zmax,wall_poly$zmean)
plot(kkk$zmax,kkk$zmean,add=TRUE,col="red")
plot(wall_poly$zmax,wall_poly$zmean)
points(kkk$zmax,kkk$zmean,add=TRUE,col="red")
plot(wall_poly$zmax,wall_poly$zsd)
points(kkk$zmax,kkk$zsd,add=TRUE,col="red")
hist(wall_poly$zmax)
hist(kkk$zmax)
load_all()
check()
check(build_vignettes = FALSE)
help("check")
check(vignettes = FALSE)
load_all()
document()
check(vignettes = FALSE)
stats::predict()
abs()
pull()
check()
check(vignettes = FALSE)
importFrom("stats", "coef", "complete.cases", "median", "quantile",
"sd")
document()
load_all()
check(vignette = FALSE)
check(vignettes = FALSE)
check(vignettes = FALSE)
check(vignettes = FALSE)
check(vignettes = FALSE)
check(vignettes = FALSE)
devtools::install_github("https://github.com/tgoodbody/sgsR", build_vignettes = FALSE)
document()
document()
help(sample_strat)
help(strat_kmeans)
check(vignettes = FALSE)
citation(sgsR)
citation("sgsR")
build_manual(path = "C:\\Users\\goodb\\Desktop")
build_manual(pkg = "sgsR", path = "C:\\Users\\goodb\\Desktop")
check(vignettes = FALSE, manual = TRUE)
install.packages("pdflatex")
devtools::build_manual()
help(sgsR)
t <- calculate_pcomp(mraster = wall_poly[[1:6]], nComp = 3, plot = TRUE)
t
plot(t)
kkk <- sample_aHELS(mraster = t, existing = existing, nQuant = 5, threshold = 0.9, plot = TRUE)
plot(t$PC1,t$PC2)
points(kkk$PC1,kkk$PC2,add=TRUE,col="red")
existing <- strat_kmeans(wall_poly[[1:3]],nstrata = 4,plot = TRUE)
existing <- strat_kmeans(wall_poly[[1:2]],nstrata = 4,plot = TRUE)
mraster
existing <- strat_kmeans(mraster,nstrata = 4,plot = TRUE)
existing <- strat_kmeans(mraster, nstrata = 3,plot = TRUE)
tt <- strat_pcomp(mraster,4,3,plot=TRUE)
sample_strat(tt,n = 200,mindist = 100)
tts <- sample_strat(tt,n = 200,mindist = 100,plot = TRUE)
tts <- sample_strat(tt,n = 200,mindist = 200,plot = TRUE)
kkk <- sample_aHELS(mraster = t, existing = tts, nQuant = 5, threshold = 0.9, plot = TRUE)
tts
tts <- sample_strat(tt,n = 200,mindist = 200,plot = TRUE)
tts
tts
plot(tts)
tts <- sample_strat(tt,n = 200,mindist = 100,plot = TRUE)
tts
t
kkk <- sample_aHELS(mraster = t, existing = tts, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = mraster[[1:3]], existing = tts, nQuant = 5, threshold = 0.9, plot = TRUE)
samples <- extract_metrics(mraster, tts, data.frame = TRUE)
samples
samples$type <- "existing"
samples$n <- seq(1:nrow(samples))
samples <- samples %>%
dplyr::select(X,Y,n,type,tidyselect::everything())
samples
samples <- extract_metrics(mraster, tts, data.frame = TRUE)
samples
tts
tts %>% dplyr::select(geometry)
existing <- existing %>%
dplyr::select(geometry)
existing <- tts %>%
dplyr::select(geometry)
samples <- extract_metrics(mraster, existing, data.frame = TRUE)
samples$type <- "existing"
samples$n <- seq(1:nrow(samples))
samples <- samples %>%
dplyr::select(X,Y,n,type,tidyselect::everything())
matCovSamp <- mat_covNB(vals = samples[5:ncol(samples)], nQuant = nQuant, nb = nb, matQ = mats$matQ)
matCovSamp[which(matCovSamp == 0)] <- 0.0000001
matCovSampDens <- matCovSamp / nrow(samples)
matCovSamp
samples
load_all()
kkk <- sample_aHELS(mraster = t, existing = tts, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = mraster, existing = tts, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = mraster[[1:3]], existing = tts, nQuant = 5, threshold = 0.9, plot = TRUE)
kkk <- sample_aHELS(mraster = mraster[[1:3]], existing = tts, nQuant = 5, nSamp = 100, plot = TRUE)
kkk
kkk <- sample_aHELS(mraster = mraster[[2:3]], existing = tts, nQuant = 5, nSamp = 100, plot = TRUE)
library(devtools)
load_all()
