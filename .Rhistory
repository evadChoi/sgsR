toSample
diff <- sum(toSample$total) - nSamp
diff
diffAbs <- abs(diff)
while(diffAbs > 0){
stratAdd <- toSample %>%
dplyr::filter(total >= min(total)) %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[which(strata==stratAdd)] + 1))
diffAbs <- diffAbs - 1
}
toSample
sum(toSample$total)
nrow(toSample[which(toSample$total == min(toSample$total))])
toSample[which(toSample$total == min(toSample$total))]
toSample
toSample[toSample$total == min(toSample$total)]
min(toSample$total)
toSample[toSample$total = min(toSample$total)]
toSample[total = min(toSample$total)]
nrow(toSample[total = 6])
nrow(filter(toSample, total == min(total)))
toSample %>%
{if (nrow(filter(toSample, total == min(total))) > 0) filter(total == min(total)) else filter(total > min(total))}
dplyr::sample_n(1)
nrow(filter(toSample, total == min(total))) > 0
nrow(filter(toSample, total == min(total)))
if (nrow(filter(toSample, total == min(total))) > 0) filter(total == min(total))
(nrow(dplyr::filter(toSample, total == min(total))) > 0)
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) dplyr::filter(total == min(total)) else filter(total > min(total))}
nrow(dplyr::filter(toSample, total == min(total))) > 0)
nrow(dplyr::filter(toSample, total == min(total))) > 0
if (nrow(dplyr::filter(toSample, total == min(total))) > 0) dplyr::filter(total == min(total))
nrow(dplyr::filter(toSample, total == min(total))) > 0)
nrow(dplyr::filter(toSample, total == min(total))
nrow(dplyr::filter(toSample, total == min(total))) > 0
if (nrow(dplyr::filter(toSample, total == min(total))) > 0){
dplyr::filter(total == min(total))
}
if (nrow(dplyr::filter(toSample, total == min(total))) > 0){
dplyr::filter(toSample, total == min(total))
}
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) dplyr::filter(toSample,total == min(total)) else filter(toSample,total > min(total))}
dplyr::sample_n(1)
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))}
dplyr::sample_n(1)
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))}
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))} %>%
dplyr::sample_n(1)
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] + 1))
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
diff <- sum(toSample$total) - nSamp
diff
toSample
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
stratAdd
toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] + 1))
diffAbs <- abs(diff)
while(diffAbs > 0){
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] + 1))
diffAbs <- diffAbs - 1
}
toSample
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
diff <- sum(toSample$total) - nSamp
diffAbs <- abs(diff)
diffAbs
while(diffAbs > 0){
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total > min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
}
toSample
#--- set global vars ---#
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
#--- determine whether there is a difference between 'n' and the number of samples provided based on count ---#
diff <- sum(toSample$total) - nSamp
diff
diffAbs <- abs(diff)
diffAbs
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1)
toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
stratAdd
toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
#--- determine whether there is a difference between 'n' and the number of samples provided based on count ---#
diff <- sum(toSample$total) - nSamp
diffAbs <- abs(diff)
diffAbs
while(diffAbs > 0){
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
}
toSample
nrow(dplyr::filter(toSample, total == min(total))) > 0
#--- set global vars ---#
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
#--- determine whether there is a difference between 'n' and the number of samples provided based on count ---#
diff <- sum(toSample$total) - nSamp
diffAbs <- abs(diff)
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
toSample
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == min(total))) > 0) as.data.frame(dplyr::filter(toSample,total == min(total))) else as.data.frame(filter(toSample,total < min(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
toSample
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
#--- determine whether there is a difference between 'n' and the number of samples provided based on count ---#
diff <- sum(toSample$total) - nSamp
toSample
nrow(dplyr::filter(toSample, total == max(total))) > 0
as.data.frame(dplyr::filter(toSample,total == max(total)))
as.data.frame(filter(toSample,total < max(total)))
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == max(total))) > 0) as.data.frame(dplyr::filter(toSample,total == max(total))) else as.data.frame(filter(toSample,total < max(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
stratAdd
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
toSample
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == max(total))) > 0) as.data.frame(dplyr::filter(toSample,total == max(total))) else as.data.frame(filter(toSample,total < max(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
stratAdd
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
toSample
#--- set global vars ---#
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
#--- determine whether there is a difference between 'n' and the number of samples provided based on count ---#
diff <- sum(toSample$total) - nSamp
diffAbs <- abs(diff)
while(diffAbs > 0){
stratAdd <- toSample %>%
{if (nrow(dplyr::filter(toSample, total == max(total))) > 0) as.data.frame(dplyr::filter(toSample,total == max(total))) else as.data.frame(filter(toSample,total < max(total)))} %>%
dplyr::sample_n(1) %>%
dplyr::select(strata) %>%
pull()
toSample <- toSample %>%
mutate(total=replace(total, strata==stratAdd, total[strata==stratAdd] - 1))
diffAbs <- diffAbs - 1
}
toSample
filter(toSample, total == 5)
load_all()
# - all the same because count of pixels in each class is the same
calculate_reqSamples(sraster = sraster,
nSamp = 610)
# - all the same because count of pixels in each class is the same
calculate_reqSamples(sraster = sraster,
nSamp = 610,
force = TRUE)
load_all()
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,
force = TRUE)
k
sum(k$total)
document()
help(samples_strat)
help(sample_strat)
load_all()
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,
existing = e.sr,
force = TRUE)
load_all()
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,
existing = e.sr,
force = TRUE)
k
sum(k$total)
e.sr
load_all()
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE, force = TRUE)
sraster = sraster
nSamp = 1700
existing = e.sr
#--- set global vars ---#
strata <- count <- freq <- total <- eTotal <- NULL
#--- determine crs of input sraster ---#
crs <- terra::crs(sraster, proj=TRUE)
vals <- terra::values(sraster) %>%
as.data.frame()
names(vals) <- "strata"
#--- determine number of samples within each strata ---#
toSample <- vals %>%
stats::na.omit() %>%
dplyr::group_by(strata) %>%
dplyr::summarize(count = dplyr::n()) %>%
dplyr::mutate(
freq = count / sum(count),
total = freq * nSamp
) %>%
#--- if a value equates to <1 it will have 0 samples --- change 0 to 1 ---#
#########################################
#### What other method could be used ####
#########################################
dplyr::mutate(total = replace(total, total < 1, 1)) %>%
dplyr::mutate(total = round(total)) %>%
dplyr::select(strata, total) %>%
as.data.frame()
#--- determine whether there is a difference between 'n' and the number of samples provided based on count ---#
diff <- sum(toSample$total) - nSamp
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
if (any(!c("strata") %in% names(existing))) {
stop("'existing' must have an attribute named 'strata'")
}
if (inherits(sf::st_geometry(existing), "sfc_POINT")) {
#--- if existing is an sf object extract the coordinates and the strata vector ---#
exist_xy <- sf::st_coordinates(existing)
strata <- existing$strata
existing <- as.data.frame(cbind(strata, exist_xy))
} else {
stop("'existing' geometry type must be 'sfc_POINT'")
}
existing <- data.frame(strata = existing$strata)
existing
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE, force = TRUE)
e.sr
inherits(sf::st_geometry(e.sr), "sfc_POINT")
sf::st_coordinates(e.sr)
load_all()
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE, force = TRUE)
load_all()
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE, force = TRUE)
load_all()
x
t <- sample_strat(sraster = sraster, nSamp = 610, plot = TRUE, include = TRUE, force = TRUE)
t <- sample_strat(sraster = sraster, nSamp = 610, plot = TRUE, force = TRUE)
t <- sample_strat(sraster = sraster, nSamp = 610,  existing = e.sr, plot = TRUE, force = TRUE)
t <- sample_strat(sraster = sraster, nSamp = 610,  existing = e.sr, plot = TRUE, force = FALSE)
load_all()
t <- sample_strat(sraster = sraster, nSamp = 610,  existing = e.sr, plot = TRUE, force = FALSE)
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,
existing = e.sr,
force = TRUE) ### new param - look at the documentation
k
document()
?calculate_reqSamples
document()
?calculate_reqSamples
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,
existing = e.sr,
force = TRUE) ### new param - look at the documentation
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,
force = TRUE) ### new param - look at the documentation
k
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610,) ### new param - look at the documentation
# - all the same because count of pixels in each class is the same
k <- calculate_reqSamples(sraster = sraster,
nSamp = 610) ### new param - look at the documentation
load_all()
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE, force = TRUE)  ### new param - look at the documentation
?missing
load_all()
x <- sample_strat(sraster = sraster, nSamp = 1700, existing = e.sr, plot = TRUE, include = TRUE, force = TRUE)  ### new param - look at the documentation
?sample_strat
document()
?sample_strat
document()
?sample_strat
load_all()
nSamp = 400
existing
nSamp > nrow(existing)
nrow(existing) > nSamp
load_all()
library(devtools)
load_all()
