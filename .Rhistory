kk$osb
use_tidy_style(strict = TRUE)
2
use_tidy_style(strict = TRUE)
check(vignettes=FALSE)
check(vignettes=FALSE)
check(vignettes=FALSE)
load_All()
load_all()
check(vignettes=FALSE)
check(vignettes=FALSE)
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
sample_balanced(mraster = mr, nSamp = 200, plot = TRUE)
load_all()
sample_balanced(mraster = mr, nSamp = 200, plot = TRUE)
sample_balanced(mraster = mr, nSamp = 100, algorithm = "lcube", access = ac, buff_inner = 50, buff_outer = 200)
sample_balanced(mraster = mr, nSamp = 100, algorithm = "lcube", access = ac, buff_inner = 50, buff_outer = 200, plot = TRUE)
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
sample_clhs(mraster = mr, nSamp = 200, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 200, plot = TRUE, iter = 20)
?clhs::clhs
mr[[1]]
which(names(mraster) == "zsd")
cost <- 3
cost <- which(names(mraster) == cost)
cost <- mraster[[cost]]
cost
cost <- 3
cost
which(names(mr) == cost)
cost <- mraster[[cost]]
cost <- which(names(mr) == "zsd")
cost
mr[[cost]]
load_All()
load_all()
calculate_distance(raster = mr, access = ac)
mr <- calculate_distance(raster = mr, access = ac)
mr$dist2access
mr <- calculate_distance(raster = mr, access = ac)
sample_clhs(mraster = mr, nSamp = 250, cost = "dist2access")
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = "dist2access")
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = "dist2access", plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = 14, plot = TRUE)
vals_tp
vals_tp <- vals %>% dplyr::select(-type)
vals_tp
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
vals <- vals %>%
dplyr::filter(complete.cases(.)) %>%
dplyr::mutate(type = "new")
vals
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing")
existingSamples
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
existingSamples
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing")
existingSamples
vals <- rbind(existingSamples, vals)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mraster <- terra::rast(raster)
names(mraster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(mraster,
poly_subset)
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1:6]], nStrata = 10)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- define desired stratification raster ---#
raster <- kmeans
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
existing <- sample_srs(raster = raster, #srs_wo
n = 75,
plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
mr <- calculate_distance(raster = mr, access = ac)
ac
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
mr <- calculate_distance(raster = mr, access = ac)
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
mr <- calculate_distance(raster = mr, access = ac)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
if (!is.null(existing)) {
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
#--- combined existing samples with vals dataframe ---#
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
#--- create dataset with labels for plotting ---#
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing")
#--- create conjoined existing dataset ---#
vals <- rbind(existingSamples, vals)
}
vals
vals <- terra::as.data.frame(mraster, xy = TRUE, row.names = FALSE) %>%
dplyr::rename(
X = x,
Y = y
)
vals
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
mr <- calculate_distance(raster = mr, access = ac)
mr
plot(mr)
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = "dist2access", plot = TRUE)
vals
if (!is.null(existing)) {
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
#--- combined existing samples with vals dataframe ---#
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
#--- create dataset with labels for plotting ---#
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing")
#--- create conjoined existing dataset ---#
vals <- rbind(existingSamples, vals)
}
vals_tp <- vals %>% dplyr::select(-type)
vals_tp
e
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existing
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
existingSamples
inherits(existing, "sf")
extract_metrics(mraster, existing, data.frame = TRUE)
!inherits(existing, "sf")
any(!c("X", "Y") %in% colnames(existing))
any(c("x", "y") %in% colnames(existing))
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
existingSamples <- existing
existingSamples
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
existingSamples
existing %>%
dplyr::select(geometry)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
if (!is.null(existing)) {
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
#--- combined existing samples with vals dataframe ---#
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing %>%
dplyr::select(geometry)
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
#--- create dataset with labels for plotting ---#
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing")
#--- create conjoined existing dataset ---#
vals <- rbind(existingSamples, vals)
}
vals
vals_tp <- vals %>% dplyr::select(-type)
if (is.numeric(cost)){
if(cost > (ncol(vals_tp) + 2) | cost < 0){
stop("'cost' index doest not exist within 'mraster'")
}
#--- need to add 2 because X and Y are added ---#
cost <- cost + 2
} else if (is.character(cost)){
cost <- which(names(vals_tp) == cost)
}  else {
stop("'cost' must be either a numeric index or name of covariate within 'mraster'")
}
load_all()
mr <- calculate_distance(raster = mr, access = ac)
sample_clhs(mraster = mr, nSamp = 250, iter = 200, cost = "dist2access", plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
install.packages("boomer")
library(boomer)
boom(sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE))
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing %>%
dplyr::select(geometry, type)
existingSamples
library(sgsR)
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
existingSamples
load_all()
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples
existingSamples %>%
dplyr::select(namesvals)
dplyr::mutate(type = "existing")
existingSamples
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples
existingSamples %>%
dplyr::select(namesvals)
existingSamples %>%
dplyr::select(namesvals) %>%
dplyr::mutate(type = "existing")
load_all()
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples %>%
dplyr::select(namesvals) %>%
dplyr::mutate(type = "existing")
existingSamples
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples %>%
dplyr::select(namesvals)
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
existingSamples %>%
dplyr::mutate(type = "existing")
existingSamples %>%
dplyr::mutate(type = "existing") %>%
dplyr::select(namesvals)
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing") %>%
dplyr::select(namesvals)
vals <- rbind(existingSamples, vals)
vals_tp <- vals %>% dplyr::select(-type)
cost
if (is.numeric(cost)){
if(cost > (ncol(vals_tp) + 2) | cost < 0){
stop("'cost' index doest not exist within 'mraster'")
}
#--- need to add 2 because X and Y are added ---#
cost <- cost + 2
} else if (is.character(cost)){
cost <- which(names(vals_tp) == cost)
}  else {
stop("'cost' must be either a numeric index or name of covariate within 'mraster'")
}
cost
ncol(vals_tp)
vals_tp
### Sample
#--- Load raster and existing plots---#
r <- system.file("extdata","wall_metrics_small.tif", package = "sgsR")
mr <- terra::rast(r)
e <- system.file("extdata","existing.shp", package = "sgsR")
e <- sf::st_read(e)
a <- system.file("extdata","roads.shp", package = "sgsR")
ac <- sf::st_read(a)
library(sgsR)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
mraster
nlyr(mraster)
mr <- calculate_distance(raster = mr, access = ac)
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
cost
vals
vals <- vals %>%
dplyr::filter(complete.cases(.)) %>%
dplyr::mutate(type = "new")
namesvals <- names(vals)
namesvals
if (!is.null(existing)) {
if (!inherits(existing, "data.frame") && !inherits(existing, "sf")) {
stop("'existing' must be a data.frame or sf object")
}
#--- combined existing samples with vals dataframe ---#
if (!inherits(existing, "sf")) {
if (any(!c("X", "Y") %in% colnames(existing))) {
#--- if coordinate column names are lowercase change them to uppercase to match requirements ---#
if (any(c("x", "y") %in% colnames(existing))) {
existing <- existing %>%
dplyr::rename(
X = x,
Y = y
)
message("Column coordinates names for 'existing' are lowercase - converting to uppercase")
} else {
#--- if no x/y columns are present stop ---#
stop("'existing' must have columns named 'X' and 'Y'")
}
}
existingSamples <- existing
} else {
existingSamples <- extract_metrics(mraster, existing, data.frame = TRUE)
}
#--- create dataset with labels for plotting ---#
existingSamples <- existingSamples %>%
dplyr::mutate(type = "existing") %>%
dplyr::select(namesvals)
#--- create conjoined existing dataset ---#
vals <- rbind(existingSamples, vals)
}
load_all()
sample_clhs(mraster = mr, nSamp = 250, existing = e, iter = 200, cost = 14, plot = TRUE)
