strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 10,b2 = 3)
use_r("strat_vars")
load_all()
strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 10,b2 = 3)
traceback
traceback()
use_r("strat_vars")
load_all()
strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 10,b2 = 3)
coordsgrps
coordsgrps <- dfc %>%
group_by(class) %>%
arrange(class) %>%
nest() %>%
ungroup()
coordsgrps
coordsgrps$data[[1]]
use_r("strat_vars")
load_all()
strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 10,b2 = 3)
strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 5,b2 = 2)
use_r("strat_vars")
load_all()
strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 10,b2 = 3)
k <- strat_vars(raster,var1 = "ALS_16",var2 = "ALS_19",b1 = 5,b2 = 2)
use_r("strat_vars")
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\inst\\extdata\\wall_metrics_small.tif")
load_all()
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\GJP\\ALS_metrics.tif")
raster
strat_vars(raster,var1="ALS_10",var2"ALS_16",b1=10,b2=3)
strat_vars(raster,var1="ALS_10",var2="ALS_16",b1=10,b2=3)
load_all()
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\inst\\extdata\\wall_metrics_small.tif")
strat_vars(raster, var1 = "wal_1", "wal_5", b1=5, b2=2)
var1="wal_1"
var2="wal_2"
b1=4
b2=3
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
#--- Determine index of each cell so to map values correctly without NA ---#
idx <- is.finite(vals[,1]) & is.finite(vals[,2])
#--- Remove NA / NaN / Inf values ---#
df <- vals %>%
as.data.frame() %>%
filter(complete.cases(.))
var1 <- ensym(var1)
var2 <- ensym(var2)
#--- Split var1 distribution in to number specified by 'breaks' ---#
dfc <- df %>%
#--- define b1 classes ---#
mutate(class1 = ntile(!!var1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(!!var2,b2)) %>%
#--- combine classes ---#
ungroup() %>%
tidyr::unite("classes_m",class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = group_indices(., classes_m))
dfc
#--- convert back to original raster extent ---#
vals[idx] <- dfc$class
vals
#--- convert back to original raster extent ---#
vals[[1]][idx] <- dfc$class
vals[[1]]
vals
vals
vals[1]
vals[,1]
vals[,1][1]
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
#--- Extract values from raster ---#
vals <- terra::subset(raster,var1) %>%
terra::values()
raster
var1
var1="wal_1"
#--- Extract values from raster ---#
vals <- terra::subset(raster,var1) %>%
terra::values()
vals[is.nan(vals)] <- NA
vals[is.infinite(vals)] <- NA
#--- Determine index of each cell so to map values correctly without NA ---#
idx <- !is.na(vals)
#--- Remove NA / NaN / Inf values ---#
df <- vals %>%
as.data.frame() %>%
filter(complete.cases(.))
var1 <- ensym(var1)
#--- Split var1 distribution in to number specified by 'breaks' ---#
dfc <- df %>%
mutate(class = ntile(!!var1,b1))
#--- convert back to original raster extent ---#
vals[idx] <- dfc$class
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
#--- Determine index of each cell so to map values correctly without NA ---#
idx <- is.finite(vals[,1]) & is.finite(vals[,2])
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
var2="wal_5"
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
var1
var1="wal_1"
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
#--- Determine index of each cell so to map values correctly without NA ---#
idx <- is.finite(vals[,1]) & is.finite(vals[,2])
#--- Remove NA / NaN / Inf values ---#
df <- vals %>%
as.data.frame() %>%
filter(complete.cases(.))
var1 <- ensym(var1)
var2 <- ensym(var2)
#--- Split var1 distribution in to number specified by 'breaks' ---#
dfc <- df %>%
#--- define b1 classes ---#
mutate(class1 = ntile(!!var1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(!!var2,b2)) %>%
#--- combine classes ---#
ungroup() %>%
tidyr::unite("classes_m",class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = group_indices(., classes_m))
#--- convert back to original raster extent ---#
vals[,1][idx] <- dfc$class
vals
#--- set newly stratified values ---#
rout <- terra::setValues(raster[[1]],vals[,1])
plot(rout)
load_all()
k <- strat_vars(raster, var1 = "wal_1", "wal_5", b1=5, b2=2)
plot(k)
k <- strat_vars(raster, var1 = "wal_1", "wal_5", b1=10, b2=3)
k <- strat_vars(raster, var1 = "wal_10", "wal_5", b1=10, b2=3)
load_all()
load_all()
k <- strat_vars(raster, var1 = "wal_10", "wal_5", b1=10, b2=3)
k <- strat_vars(raster, var1 = "wal_10", "wal_5", b1=5, b2=2)
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
var1="wal_5"
var2="wal_3"
b1=3
b2=3
#--- Extract values from raster ---#
vals <- terra::subset(raster,c(var1,var2)) %>%
terra::values()
#--- Determine index of each cell so to map values correctly without NA ---#
idx <- is.finite(vals[,1]) & is.finite(vals[,2])
#--- Remove NA / NaN / Inf values ---#
df <- vals %>%
as.data.frame() %>%
filter(complete.cases(.))
var1 <- ensym(var1)
var2 <- ensym(var2)
#--- Split var1 distribution in to number specified by 'breaks' ---#
dfc <- df %>%
#--- define b1 classes ---#
mutate(class1 = ntile(!!var1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(!!var2,b2)) %>%
#--- combine classes ---#
ungroup() %>%
tidyr::unite("classes_m",class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = group_indices(., classes_m))
!complete.cases(dfc)
dfc[!complete.cases(dfc),]
dfc[!is.nan(dfc),]
dfc
is.nan(dfc)
class(dfc)
table(dfc$classes_m,dfc$class)
load_all()
k <- strat_vars(raster, var1 = "wal_10", "wal_5", b1=5, b2=2)
classPlot
coordsgrps <- dfc %>%
group_by(class) %>%
arrange(class) %>%
nest() %>%
ungroup()
q <- classPlot(dfc = dfc,
coordsgrps = coordsgrps,
var1 = var1,
var2 = var2)
print(q)
strat_vars(raster, var1 = "wal_10", "wal_5", b1=5, b2=2)
load_all()
strat_vars(raster, var1 = "wal_10", "wal_5", b1=5, b2=2)
strat_vars(raster, var1 = "wal_10", "wal_5", b1=2, b2=6)
strat_vars(raster, var1 = "wal_10", "wal_5", b1=8, b2=2)
strat_vars(raster, var1 = "wal_1", "wal_14", b1=8, b2=2)
strat_vars(raster, var1 = "wal_1", "wal_10", b1=8, b2=2)
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\GJP\\ALS_metrics.tif")
plot(raster)
strat_vars(raster, var1 = "ALS_7", "ALS_16", b1=8, b2=2)
strat_vars(raster, var1 = "ALS_7", "ALS_16", b1=10, b2=4)
sgsR::strat_kmeans(raster,5)
load_all()
sgsR::strat_kmeans(raster,5)
#--- Extract values from raster ---#
vals <- terra::values(raster)
#--- Determine index of each cell so to map values correctly without NA ---#
vals[is.nan(vals)] <- NA
vals[is.infinite(vals)] <- NA
idx <- !is.na(vals)
vals[idx]
k=5
iter.max=500
algorithm="Lloyd"
km_clust <- stats::kmeans(scale(vals[idx],center = TRUE,scale=TRUE), centers=k, iter.max = iter.max, algorithm = algorithm)
km_clust
unique(km_clust@data)
unique(km_clust$cluster)
vals
vals[,1]
#--- convert k-means values back to original raster extent ---#
vals[,1][idx] <- km_clust$cluster
idx
vals
#--- Extract values from raster ---#
vals <- terra::values(raster)
#--- Determine index of each cell so to map values correctly without NA ---#
vals[is.nan(vals)] <- NA
vals[is.infinite(vals)] <- NA
idx <- !is.na(vals)
km_clust$cluster
vals
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\inst\\extdata\\wall_metrics_small.tif")
#--- Extract values from raster ---#
vals <- terra::values(raster)
#--- Determine index of each cell so to map values correctly without NA ---#
vals[is.nan(vals)] <- NA
vals[is.infinite(vals)] <- NA
idx <- !is.na(vals)
km_clust <- stats::kmeans(scale(vals[idx],center = TRUE,scale=TRUE), centers=k, iter.max = iter.max, algorithm = algorithm)
#--- convert k-means values back to original raster extent ---#
vals[,1][idx] <- km_clust$cluster
km_clust$cluster
vals[,1]
vals[,1][idx]
km_clust$cluster
vals[,1][idx]
#--- convert k-means values back to original raster extent ---#
vals[,1][idx] <- km_clust$cluster
km_clust$cluster
vals[,1][idx]
km_clust$cluster
#--- Extract values from raster ---#
vals <- terra::values(raster)
#--- Determine index of each cell so to map values correctly without NA ---#
vals[is.nan(vals)] <- NA
vals[is.infinite(vals)] <- NA
idx <- !is.na(vals)
idx
length(km_cluster)
length(km_clust$cluster)
length(vals[,1][idx])
#--- convert k-means values back to original raster extent ---#
vals[,1][idx] <- km_clust$cluster
load_all()
rm(list = c("strat_kmeans"))
strat_kmeans(raster,5)
km_clust$cluster
vals[,1][idx]
vals[idx]
vals[idx]
load_all()
strat_kmeans(raster,5)
strat_kmeans(raster,k = 5)
strat_kmeans(raster,k = 8)
strat_kmeans(raster,k = 3)
strat_kmeans(raster[[2]],k = 3)
strat_kmeans(raster[[2]],k = 5)
strat_kmeans(raster[[2]],k = 7)
strat_kmeans(raster[[2]],k = 10)
strat_kmeans(raster[[2:5]],k = 10)
strat_kmeans(raster[[1:10]],k = 10)
strat_kmeans(raster[[1:9]],k = 10)
strat_kmeans(raster[[1:9]],k = 7)
raster
names(raster)
strat_kmeans(raster[[1,3,5,6,7]],k = 7)
strat_kmeans(raster[[c(1,3,5,6,7)]],k = 7)
strat_kmeans(raster[[c(seq(1,10,1))]],k = 7)
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\GJP\\ALS_metrics.tif")
strat_kmeans(raster[[c(seq(1,10,1))]],k = 7)
strat_kmeans(raster[[c(seq(1,10,1))]],k = 3)
load_all()
strat_kmeans(raster[[c(seq(1,10,1))]],k = 3)
kmv <- raster[[1]]
kmv[idx] <- km_clust$cluster
km_clust$cluster
kmv[idx]
kmv
strat_kmeans(raster[[c(seq(1,10,1))]],k = 3)
kmv
values(kmv)
idx
values(kmv)[idx]
load_all()
strat_kmeans(raster[[c(seq(1,10,1))]],k = 3)
load_all()
strat_kmeans(raster[[c(seq(1,10,1))]],k = 3)
strat_kmeans(raster[[5]],k = 3)
strat_kmeans(raster[[5:7]],k = 4)
load_all()
strat_kmeans(raster[[5:7]],k = 4)
vals
length(vals)
#--- Extract values from raster ---#
vals <- terra::values(raster)
#--- Determine index of each cell so to map values correctly without NA ---#
vals[is.nan(vals)] <- NA
vals[is.infinite(vals)] <- NA
idx <- !is.na(vals)
vals[idx]
km_clust$cluster
load_all()
strat_kmeans(raster[[5:7]],k = 4)
strat_kmeans(raster[[5:7]],k = 4,algorithm = "MacQueen")
strat_kmeans(raster,k = 4,algorithm = "MacQueen")
strat_kmeans(raster[[1]],k = 4,algorithm = "MacQueen")
strat_kmeans(raster[[1]],k = 4)
strat_kmeans(raster[[1]],k = 6)
strat_kmeans(raster[[1]],k = 9)
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\inst\\extdata\\wall_metrics_small.tif")
strat_kmeans(raster[[1]],k = 9)
strat_kmeans(raster[[1]],k = 5)
strat_kmeans(raster[[1:9]],k = 5)
strat_kmeans(raster[[1:4]],k = 5)
strat_kmeans(raster[[1:3]],k = 5)
strat_kmeans(raster[[1:2]],k = 5)
strat_kmeans(raster[[1:2]],k = 2)
strat_kmeans(raster[[1:2]],k = 5)
strat_kmeans(raster[[1:2]],k = 2)
strat_kmeans(raster[[1:2]],k = 5)
strat_osb(raster[[1]],h = 4,n=25)
raster
strat_osb(raster,var1 = "wal_1",6)
strat_vars(raster,var1 = "wal_1",6)
strat_vars(raster,var1 = "wal_1",b1 = 6)
strat_vars(raster = raster,var1 = "wal_1",b1 = 6)
strat_vars(raster, var1 = "wal_1", b1 = 5)
raster
load_all()
strat_vars(raster, var1 = "wal_1", b1 = 4)
load_all()
strat_vars(raster, var1 = "wal_1", b1 = 4)
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\inst\\extdata\\wall_metrics_small.tif")
strat_vars(raster, var1 = "wal_1", b1 = 4)
strat_vars(raster, var1 = "wal_1", var2 = "wal_4" b1 = 4)
strat_vars(raster, var1 = "wal_1", var2 = "wal_4", b1 = 4)
strat_vars(raster, var1 = "wal_1", var2 = "wal_4", b1 = 4, b2 = 3)
load_all()
rm(list = c("strat_kmeans"))
strat_vars(raster, var1 = "wal_1", var2 = "wal_4", b1 = 4, b2 = 3)
strat_vars(raster, var1 = "wal_1", b1 = 4, b2 = 3)
strat_vars(raster, var1 = "wal_1", b1 = 4)
strat_vars(raster, var1 = "wal_1", b1 = 4)
load_all()
strat_vars(raster, var1 = "wal_1", b1 = 4)
load_all()
use_r("strat_pcomp")
load_all()
rm(list = c("strat_kmeans"))
raster <- rast("G:\\Documents\\post_doc\\RMFinventory\\inst\\extdata\\wall_metrics_small.tif")
pca <- RStoolbox::rasterPCA(as(raster,"RasterStack"))
load_all()
pca <- RStoolbox::rasterPCA(as(raster,"RasterStack"))
library(raster)
as(raster,"RasterStack")
as(raster,"Raster")
k <- as(raster,"Raster")
plot(k)
plot(k)
pca <- RStoolbox::rasterPCA(as(raster,"Raster"))
pca
nComp=3
pca <- RStoolbox::rasterPCA(as(raster,"Raster"),nComp = nComp, spca = TRUE)
pca
loadings(rpc$model)
loadings(pca$model)
raster <- raster[[1:5]]
pca <- RStoolbox::rasterPCA(as(raster,"Raster"),nComp = nComp, spca = TRUE)
pca
loadings(rpc$model)
loadings(pca$model)
loadings(pca$model)
plot(pca$map)
pca$model
pca$model$loadings
pca$map$PC1
values(pca$map$PC1)
values(pca$map)
b1=5
b2=3
pcavals %>%
#--- define b1 classes ---#
mutate(class1 = ntile(PCA1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(PCA2,b2)) %>%
#--- combine classes ---#
group_by(class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
pcavals <- data.frame(values(pca$map))
pcavals %>%
#--- define b1 classes ---#
mutate(class1 = ntile(PCA1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(PCA2,b2)) %>%
#--- combine classes ---#
group_by(class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
pcavals
head(pcavals)
pcavals %>%
#--- define b1 classes ---#
mutate(class1 = ntile(PC1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(PC2,b2)) %>%
#--- combine classes ---#
group_by(class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
#--- Split PCA1 distribution in to number specified by 'breaks' ---#
pcagrps <- pcavals %>%
#--- define b1 classes ---#
mutate(class1 = ntile(PC1,b1)) %>%
#--- group by class to sub stratify ---#
group_by(class1) %>%
#--- define b2 classes ---#
mutate(class2 = ntile(PC2,b2)) %>%
#--- combine classes ---#
group_by(class1,class2) %>%
#--- establish newly formed unique class ---#
mutate(class = cur_group_id())
pcagrps %>% ggplot(aes(PC1,PC2)) +
geom_point()
pcagrps %>% ggplot(aes(PC1,PC2,fill=class)) +
geom_point() +
geom
pcagrps %>% ggplot(aes(PC1,PC2,fill=class)) +
geom_point()
classPlot
coordsgrps <- pcagrps %>%
group_by(class) %>%
arrange(class) %>%
nest() %>%
ungroup()
p <- classPlot(pcagrps,
coordgrps,
var1 = PC1,
var2 = PC2)
p <- classPlot(pcagrps,
coordgrps,
var1 = "PC1",
var2 = "PC2")
p <- classPlot(pcagrps,
coordsgrps,
var1 = PC1,
var2 = PC2)
classPlot
p <- classPlot(pcagrps,
coordsgrps,
var1 = "PC1",
var2 = "PC2")
p
traceback()
print(p)
plot(pca$map)
pcagrps
#--- convert back to original raster extent ---#
pcavals[,1] <- pcagrps$class
#--- set newly stratified values ---#
rout <- terra::setValues(raster[[1]],pcavals[,1])
names(rout) <- "class"
plot(rout)
dev.off()
plot(rout)
rout
load_all()
use_r("strat_pcomp")
load_all()
load_all()
