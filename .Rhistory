breaks <- dfc %>%
group_by(class) %>%
summarize(breaks = max(!!metric))
breaks[1:(nstrata-1),]
dfc <- df %>%
dplyr::mutate(class = ntile(!!metric,nstrata))
#--- determine numeric breaks ---#
breaks <- dfc %>%
dplyr::group_by(class) %>%
dplyr::summarize(breaks = max(!!metric)) %>%
dplyr::select(breaks)
breaks[1:(nstrata-1),]
data <- terra::as.data.frame(vals)
names(data) <- "metric"
p1 <- ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with defined breaks"))
p1
data
ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram()
ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed")
breaks <- dfc %>%
dplyr::group_by(class) %>%
dplyr::summarize(breaks = max(!!metric)) %>%
dplyr::select(breaks) %>%
as.data.frame()
breaks <- breaks[1:(nstrata-1),]
ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with defined breaks"))
ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with defined breaks")) +
ggplot2::xlim(min(metric),max(metric))
ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with defined breaks")) +
ggplot2::xlim(c(min(metric),max(metric)))
ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with defined breaks")) +
ggplot2::xlim(c(min(!!metric),max(!!metric)))
terra::minmax(data)
data <- terra::as.data.frame(vals)
names(data) <- "metric"
min <- min(data)
max <- max(data)
p1 <- ggplot2::ggplot(data,aes(metric)) +
ggplot2::geom_histogram() +
ggplot2::geom_vline(xintercept = breaks, linetype = "dashed") +
ggplot2::ggtitle(paste0(metric, " histogram with defined breaks")) +
ggplot2::xlim(c(min, max))
p1
load_all()
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
load_all()
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
load_all('')
load_all()
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
dfc
dfc %>%
dplyr::select(metric)
load_all()
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
dfc[,1]
load_all()
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
df.p <- dfc %>%
dplyr::select(metric)
df.p
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
metric
ggplot2::ggplot(df.p,aes(metric)) +
ggplot2::geom_histogram()
ggplot2::ggplot(df.p,aes(!!metric)) +
ggplot2::geom_histogram()
load_all()
strat_quantiles(mraster = wall_poly,metric = "p99",nstrata = 10,plot=TRUE)
load_all()
library(devtools)
load_all()
check()
check()
#--- extract strata from raster for already existing sample network ---#
#--- we use random samples defined above ---#
existing <- extract_existing(sraster = kmeans,
existing = srs_wo)
library(sgsR)
library(terra)
library(sf)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(spatstat)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","rmf_metrics.tif", package = "sgsR")
raster <- terra::rast(raster)
names(raster) <- c("avg", "cov", "std","p10", "p20","p50","p70","p95", "p99","d0","d2","d4","dns")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- import ALS metrics raster ---#
raster <- system.file("extdata","rmf_metrics.tif", package = "sgsR")
raster <- terra::rast(raster)
# names(raster) <- c("avg", "cov", "std","p10", "p20","p50","p70","p95", "p99","d0","d2","d4","dns")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
raster
raster <- system.file("extdata","rmf_metrics.tif", package = "sgsR")
raster <- terra::rast(raster)
names(raster) <- c("zmax","zmean","zsd","pzabove2","pzabovemean","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
names(raster)
raster <- system.file("extdata","rmf_metrics.tif", package = "sgsR")
raster <- terra::rast(raster)
names(raster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
raster
#--- import ALS metrics raster ---#
raster <- system.file("extdata","rmf_metrics.tif", package = "sgsR")
raster <- terra::rast(raster)
names(raster) <- c("zmax","zmean","zsd","pzabove2","zq20","zq50","zq70","zq90","zq95","l_1","l_2","t_3","t_4")
#--- import forest inventory polygon and mask unwanted areas ---#
poly <- system.file("extdata","inventory_polygons.shp", package = "sgsR")
poly <- sf::st_read(poly)
#--- import access layer to be used during sampling if desired ---#
roads <- system.file("extdata","roads.shp", package = "sgsR")
roads <- sf::st_read(roads)
#--- manipulate inventory polygon to mask out unwanted areas ---#
poly_subset <- poly[poly$POLYTYPE == "FOR" & poly$OWNER == 1, ]
poly_subset <- sf::st_union(poly_subset)
poly_subset <- terra::vect(poly_subset)
#--- mask input ALS raster using polygon layer ---#
wall_poly <- terra::mask(raster,
poly_subset)
terra::plot(wall_poly[[1:2]])
terra::plot(wall_poly[[1:2]])
#--- perform stratification using k-means ---#
kmeans <- strat_kmeans(mraster = wall_poly[[1]], nstrata = 4)
plot(kmeans)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- perform stratification using OSB ---#
#--- note that this one can take a while ---#
osb <- strat_osb(mraster = wall_poly,
metric = "pzabove2",
nstrata = 4,
n = 20,
details = TRUE)
#--- perform stratification using user-defined breaks ---#
#--- define breaks for metric ---#
breaks <- c(seq(5,20,5))
breaks
#--- stratify on 1 metric only ---#
bk1 <- strat_breaks(mraster = wall_poly,
metric = "avg",
breaks = breaks,
details = TRUE,
plot = TRUE)
#--- perform stratification using user-defined breaks ---#
#--- define breaks for metric ---#
breaks <- c(seq(5,20,5))
breaks
#--- stratify on 1 metric only ---#
bk1 <- strat_breaks(mraster = wall_poly,
metric = "pzabove2",
breaks = breaks,
details = TRUE,
plot = TRUE)
#--- perform stratification using user-defined breaks ---#
#--- define breaks for metric ---#
breaks <- c(seq(5,20,5))
breaks
#--- stratify on 1 metric only ---#
bk1 <- strat_breaks(mraster = wall_poly,
metric = "zmean",
breaks = breaks,
details = TRUE,
plot = TRUE)
#--- stratify on 2 metrics ---#
breaks2 <- c(seq(3,9,3))
breaks2
bk2 <- strat_breaks(mraster = wall_poly,
metric = "zmean",
metric2 = "p95",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
#--- stratify on 2 metrics ---#
breaks2 <- c(seq(3,9,3))
breaks2
bk2 <- strat_breaks(mraster = wall_poly,
metric = "zmean",
metric2 = "pz95",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
#--- stratify on 2 metrics ---#
breaks2 <- c(seq(3,9,3))
breaks2
bk2 <- strat_breaks(mraster = wall_poly,
metric = "zmean",
metric2 = "zq95",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
#--- stratify on 2 metrics ---#
breaks2 <- c(seq(3,30,10))
breaks2
bk2 <- strat_breaks(mraster = wall_poly,
metric = "zmean",
metric2 = "zq95",
breaks = breaks,
breaks2 = breaks2,
details = TRUE,
plot = TRUE)
#--- perform stratification using principal components on P1 only ---#
pcomp1 <- strat_pcomp(mraster = wall_poly,
nstrata = 4)
plot(pcomp1)
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
plot(pcomp2)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
#--- perform stratification using an individual metric ---#
#--- if no 'metric' name defined and raster is 1 layer - automatically uses only available layer ---#
metrics1 <- strat_quantiles(mraster = wall_poly[[1]],
nstrata = 5)
plot(metrics1)
#--- perform stratification using an individual metric ---#
metrics2 <- strat_quantiles(mraster = wall_poly,
metric = "avg",
nstrata = 10)
#--- perform stratification using an individual metric ---#
metrics2 <- strat_quantiles(mraster = wall_poly,
metric = "zmean",
nstrata = 10)
plot(metrics2)
#--- perform stratification using 2 metrics metrics ---#
metrics3 <- strat_quantiles(mraster = wall_poly,
metric = "zmean",
metric2 = "zq95",
nstrata = 10,
nstrata2 = 5)
plot(metrics3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
#--- define desired stratification raster ---#
sraster <- metrics2
#--- SRS **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
srs_wo <- sample_srs(sraster = sraster,
n = 50,
plot = TRUE)
#--- increase desired samples and mindist parameter ---#
srs_md <- sample_srs(sraster = sraster,
n = 300,
mindist = 400,
plot = TRUE)
#--- sampling **with** access defined---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also speficy we want an external buffer ('buff_outer') of 200 ---#
srs_w <- sample_srs(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling **without** access defined---#
#--- 'mindist' between samples defaults to 100 ---#
strat_wo <- sample_strat(sraster = sraster,
n = 200,
plot = TRUE)
#--- change mindist parameter ---#
strat_md <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
strat_w_a <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = raster,
n = 200,
algorithm = "lpm2",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_w_a <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lpm2",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = wall_poly,
n = 200,
algorithm = "lcube",
plot = TRUE)
#--- need to add a variable named strata to enable stratified sampling ---#
mraster <- c(wall_poly,kmeans)
#--- stratified sampling with access and buffers provided ---#
bal_wo <- sample_balanced(mraster = mraster,
n = 200,
algorithm = "lcubestratified",
plot = TRUE)
#--- stratified sampling with access and buffers provided ---#
bal_w_a <- sample_balanced(mraster = mraster,
n = 200,
algorithm = "lcubestratified",
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- extract strata from raster for already existing sample network ---#
#--- we use random samples defined above ---#
existing <- extract_existing(sraster = kmeans,
existing = srs_wo)
existing
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
srs_wo
extract_existing(sraster = kmeans,
existing = srs_wo)
existing <- extract_existing(sraster = kmeans,
existing = srs_wo)
existing
sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
existing
inherits(sf::st_geometry(existing)
)
inherits(sf::st_geometry(existing),"sfc_POINT")
load_all()
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
load_all()
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
existing
st_geometry(existing)
sf::st_geometry(existing)
sf::st_geometry(roads)
inherits(sf::st_geometry(existing),"sfc_POINT")
load_all()
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e <- sample_strat(sraster = sraster,
n = 200,
mindist = 200,
existing = existing,
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- red plots are existing and black are new ---#
#--- how many samples did we get total? ---#
strat_w_e
#--- sampling **with** access defined **and** existing samples defined ---#
#--- we want 200 samples with 200m min distance between each ---#
#--- we specify we have an existing plot network to include in our sampling ---#
#--- we also provide an `access` polygon, which is linear road features ---#
#--- we specify we want an internal buffer ('buff_inner') of 50 ---#
#--- we also specify we want an external buffer ('buff_outer') of 200 ---#
strat_w_e_i <- sample_strat(sraster = kmeans,
n = 200,
mindist = 200,
existing = existing,
include = TRUE, #--- including our existing plots to reach 200 samples ---#
access = roads,
buff_inner = 50,
buff_outer = 200,
plot = TRUE)
#--- how many samples did we get total? ---#
strat_w_e_i
#--- extract metrics from multi-band ALS raster for potential modeling ---#
metrics <- extract_metrics(mraster = wall_poly,
samples = strat_w_e_i)
metrics
#--- if 'data.frame = TRUE -- output will be a dataframe instead of an sf object ---#
check()
dplyr::leadload_all()
load_all()
load_all()
load_all()
load_all()
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
chekc()
check()
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
load_all()
#--- perform stratification using principal components on P1 only ---#
pcomp1 <- strat_pcomp(mraster = wall_poly,
nstrata = 4)
plot(pcomp1)
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
plot(pcomp2)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
load_all()
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
load_all()
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
load_all()
#--- perform stratification using principal components on P1 and P2 ---#
pcomp2 <- strat_pcomp(mraster = wall_poly,
nstrata = 4,
nstrata2 = 3)
#--- number of output strata will always be equal to ---#
#--- 'nstrata' * 'nstrata2' (if 'nstrata2' is provided) ---#
plot(pcomp2)
#--- set 'details' = TRUE to get algorithm details and outputs ---#
check()
use_package("magrittr",min_version = TRUE)
check()
